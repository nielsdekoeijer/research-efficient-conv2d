const std = @import("std");
const testing = std.testing;
const GetStride = @import("util.zig").GetStride;
const ConvConfig = @import("ConvConfig.zig").ConvConfig;
const ConvLayout = @import("ConvConfig.zig").ConvLayout;
const ConvBackend = @import("ConvConfig.zig").ConvBackend;

pub noinline fn Conv_Direct_NCHW(
    comptime config: anytype,
    noalias inp0: []align(config.A) const config.T,
    noalias inp1: []align(config.A) const config.T,
    noalias out0: []align(config.A) config.T,
) void {
    // read inp shape
    const iN = config.inp0_shape[0]; // batch size
    const iN_stride = comptime GetStride(config.inp0_shape, 0);
    const iC = config.inp0_shape[1]; // input channels
    const iC_stride = comptime GetStride(config.inp0_shape, 1);
    const iH = config.inp0_shape[2]; // input height
    const iH_stride = comptime GetStride(config.inp0_shape, 2);
    const iW = config.inp0_shape[3]; // input width
    const iW_stride = comptime GetStride(config.inp0_shape, 3);

    // read wgt shape
    const kM = config.inp1_shape[0]; // output channels
    const kM_stride = comptime GetStride(config.inp1_shape, 0);
    const kC = config.inp1_shape[1]; // input channels
    const kC_stride = comptime GetStride(config.inp1_shape, 1);
    const kH = config.inp1_shape[2]; // kernel height
    const kH_stride = comptime GetStride(config.inp1_shape, 2);
    const kW = config.inp1_shape[3]; // kernel width
    const kW_stride = comptime GetStride(config.inp1_shape, 3);

    // read out shape
    const oN = config.out0_shape[0]; // batch size
    const oN_stride = comptime GetStride(config.out0_shape, 0);
    const oC = config.out0_shape[1]; // output channels
    const oC_stride = comptime GetStride(config.out0_shape, 1);
    const oH = config.out0_shape[2]; // output height
    const oH_stride = comptime GetStride(config.out0_shape, 2);
    const oW = config.out0_shape[3]; // output width
    const oW_stride = comptime GetStride(config.out0_shape, 3);

    // sanity
    if (comptime iC != kC) {
        @compileError("Input channel count does not match weight input channel count");
    }

    if (comptime kM != oC) {
        @compileError("Output channel count does not match weight output channel count");
    }

    if (comptime iN != oN) {
        @compileError("Input batch size does not match output batch size");
    }

    // stride
    const SH = config.strides[0];
    const SW = config.strides[1];

    // dilation
    const DH = config.dilations[0];
    const DW = config.dilations[1];

    // padding
    const PH: isize = @intCast(config.pads[0]);
    const PW: isize = @intCast(config.pads[2]);

    // impl for NCHW input layout
    for (0..iN) |n| {
        const in_stride = n * iN_stride;
        const on_stride = n * oN_stride;
        for (0..oC) |oc| {
            const oc_stride = oc * oC_stride;
            const km_stride = oc * kM_stride;
            for (0..oH) |oh| {
                const oh_stride = oh * oH_stride;
                for (0..oW) |ow| {
                    const ow_stride = ow * oW_stride;
                    var acc = @as(config.T, 0);
                    for (0..iC) |ic| {
                        const ic_stride = ic * iC_stride;
                        const kc_stride = ic * kC_stride;
                        for (0..kH) |kh| {
                            const kh_stride = kh * kH_stride;
                            const ih = @as(isize, @intCast(oh * SH + kh * DH)) - PH;
                            if (0 <= ih and ih < iH) {
                                const ih_stride = @as(usize, @intCast(ih)) * iH_stride;
                                for (0..kW) |kw| {
                                    const kw_stride = kw * kW_stride;
                                    const iw = @as(isize, @intCast(ow * SW + kw * DW)) - PW;
                                    if (0 <= iw and iw < iW) {
                                        const iw_stride = @as(usize, @intCast(iw)) * iW_stride;

                                        const iidx = in_stride + ic_stride + ih_stride + iw_stride;

                                        const inp = inp0[iidx];
                                        const wgt = inp1[km_stride + kc_stride + kh_stride + kw_stride];

                                        acc += inp * wgt;
                                    }
                                }
                            }
                        }
                    }

                    out0[on_stride + oc_stride + oh_stride + ow_stride] = acc;
                }
            }
        }
    }
}

test "NCHW Direct test 1" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 1, 1, 5, 3 },
        .inp1_shape = .{ 1, 1, 2, 3 },
        .out0_shape = .{ 1, 1, 4, 1 },
        .kernel_shape = .{ 2, 3 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [15]f32 align(16) = .{
        -0.358519971370697,
        0.26798588037490845,
        0.11229919642210007,
        0.4292290210723877,
        0.11415717750787735,
        1.3819267749786377,
        0.44645678997039795,
        -1.0601099729537964,
        -0.5996289253234863,
        -0.3888753354549408,
        0.87489914894104,
        -1.2531745433807373,
        0.16086532175540924,
        0.6142843961715698,
        -0.30762794613838196,
    };

    const wgt: [6]f32 align(16) = .{
        -0.4089125692844391,
        1.5432047843933105,
        -0.4246416389942169,
        -1.9990278482437134,
        1.30063796043396,
        -0.770500898361206,
    };

    const ref: [4]f32 align(16) = .{
        -1.2618659734725952,
        -2.3954570293426514,
        1.316970705986023,
        2.7557296752929688,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    Conv_Direct_NCHW(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Direct test 2" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 3, 2 },
        .out0_shape = .{ 2, 2, 1, 4 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -0.6280246376991272,
        1.6140795946121216,
        -0.9449822306632996,
        -0.9777462482452393,
        -0.2176765650510788,
        -0.017754601314663887,
        -0.9894724488258362,
        -0.22718627750873566,
        0.8807862401008606,
        -1.9125282764434814,
        0.13417227566242218,
        0.9404901266098022,
        1.2502275705337524,
        0.9295229315757751,
        -1.1512789726257324,
        2.254267930984497,
        -1.5793699026107788,
        0.3724897503852844,
        -0.23397867381572723,
        0.521661102771759,
        -1.7779607772827148,
        -1.0190448760986328,
        -0.573868989944458,
        0.08347214013338089,
        -2.840707302093506,
        0.5075181722640991,
        -0.9681355953216553,
        -0.06889995187520981,
        -1.4471447467803955,
        -0.49155786633491516,
        -0.9813637733459473,
        0.09912490099668503,
        0.7177733182907104,
        -0.5457186698913574,
        -0.7442996501922607,
        1.6500577926635742,
        0.43362945318222046,
        1.7936387062072754,
        0.5170062780380249,
        2.727663278579712,
        -0.8226958513259888,
        0.7962660193443298,
        0.17825517058372498,
        0.38505011796951294,
        0.22973573207855225,
        0.7824028730392456,
        -0.021099848672747612,
        -1.7048635482788086,
        -0.5033658742904663,
        -0.55440354347229,
        0.9701469540596008,
        -0.27020692825317383,
        -0.09184637665748596,
        -0.510846734046936,
        -0.455671101808548,
        0.48813381791114807,
        -1.2672587633132935,
        -1.0496695041656494,
        0.22225773334503174,
        -0.8253034949302673,
        0.3074842393398285,
        0.9893583655357361,
        -0.19724790751934052,
        1.6548577547073364,
        -0.5076632499694824,
        -1.2672996520996094,
        -0.7863125801086426,
        1.2473903894424438,
        -0.9732029438018799,
        -1.5909537076950073,
        0.03841596841812134,
        -1.6279298067092896,
        0.4292444884777069,
        -1.1628122329711914,
        -1.1610499620437622,
        -1.087732195854187,
        -0.7315839529037476,
        -0.9902138113975525,
        0.2288098782300949,
        -0.7095466256141663,
        -0.002567184856161475,
        -0.08339174091815948,
        0.3721598982810974,
        -0.6047512888908386,
        0.42479103803634644,
        -0.1447257250547409,
        -0.44161248207092285,
        0.10023362189531326,
        -0.9595059156417847,
        0.24834281206130981,
        -0.29937446117401123,
        -0.20791545510292053,
        0.7482834458351135,
        -0.2920805811882019,
        -1.8437423706054688,
        -1.7788238525390625,
        1.1488653421401978,
        -0.41596633195877075,
        -0.06470707058906555,
        0.22399236261844635,
        1.055483102798462,
        0.17550699412822723,
        -0.17151887714862823,
        1.156956672668457,
        0.7324555516242981,
        -0.935128390789032,
        -0.8331840634346008,
        -2.0040574073791504,
        -0.5986343622207642,
        -0.6670516133308411,
        0.631109893321991,
        -1.185133934020996,
        0.62860107421875,
        -0.43506261706352234,
        0.8012681007385254,
        0.1292397528886795,
        -1.1862471103668213,
        0.7047094702720642,
        0.14884671568870544,
        -2.479705572128296,
    };

    const wgt: [48]f32 align(16) = .{
        -0.2960699796676636,
        -1.4678517580032349,
        1.4017424583435059,
        -0.4302460551261902,
        0.1016417145729065,
        0.08839526027441025,
        0.4637245535850525,
        0.24944370985031128,
        -0.025915732607245445,
        1.0670828819274902,
        0.4798973798751831,
        -2.338491916656494,
        1.1509078741073608,
        1.5414314270019531,
        -0.12470442801713943,
        0.5973199009895325,
        0.8042214512825012,
        -0.08642758429050446,
        -0.9091159105300903,
        -0.20655006170272827,
        -1.2080376148223877,
        -0.6164518594741821,
        -2.0801897048950195,
        -0.3983084559440613,
        0.6588601469993591,
        0.3837122321128845,
        -1.1453056335449219,
        -0.8598639965057373,
        1.356641411781311,
        1.9930771589279175,
        0.25816524028778076,
        -0.33855170011520386,
        -2.588618278503418,
        -0.5634929537773132,
        -0.3779677152633667,
        -1.895232081413269,
        -1.3451528549194336,
        0.5323290228843689,
        1.921704649925232,
        -1.318925380706787,
        1.7162363529205322,
        -0.3319244384765625,
        -0.1661805659532547,
        -1.3040356636047363,
        0.3422681391239166,
        0.25095537304878235,
        -0.330475389957428,
        -0.6271396279335022,
    };

    const ref: [16]f32 align(16) = .{
        -3.4449477195739746,
        4.968505859375,
        9.151043891906738,
        1.5182197093963623,
        14.16035270690918,
        11.9331693649292,
        9.111010551452637,
        0.7806155681610107,
        -0.6631898283958435,
        2.677786111831665,
        1.087661862373352,
        -2.0658748149871826,
        -0.5972138047218323,
        5.427197456359863,
        -2.6581828594207764,
        4.265524864196777,
    };

    var out: [16]f32 align(16) = .{0} ** 16;
    Conv_Direct_NCHW(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Direct test 3" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 3, 2 },
        .out0_shape = .{ 2, 2, 1, 1 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 3, 4 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -1.4702636003494263,
        0.23131108283996582,
        0.22648951411247253,
        0.4460298418998718,
        -1.4537765979766846,
        -0.29502686858177185,
        -0.545952320098877,
        0.853805661201477,
        0.4902304410934448,
        0.14156830310821533,
        -1.2523963451385498,
        0.15377359092235565,
        -0.2044609785079956,
        -2.08695387840271,
        -0.43693938851356506,
        0.90791916847229,
        -2.3394033908843994,
        0.7195249795913696,
        -0.41431915760040283,
        0.08093663305044174,
        0.185881569981575,
        -0.2981736361980438,
        -0.25015896558761597,
        -0.12961046397686005,
        0.01386803388595581,
        0.37718603014945984,
        2.6341171264648438,
        -0.7612090110778809,
        1.0626671314239502,
        0.8646946549415588,
        1.367823839187622,
        -0.23561698198318481,
        0.9351848363876343,
        -0.7407674789428711,
        0.0689224824309349,
        -1.3187239170074463,
        0.1340554654598236,
        -0.051691267639398575,
        -1.4700254201889038,
        -1.5278929471969604,
        0.12210432440042496,
        1.2158782482147217,
        0.1108492985367775,
        1.0043221712112427,
        1.4541033506393433,
        1.469886302947998,
        0.4277836084365845,
        -0.18851006031036377,
        0.7294447422027588,
        -0.335559219121933,
        -1.4281798601150513,
        0.4996020197868347,
        0.5537087321281433,
        0.010778169147670269,
        -1.1253467798233032,
        0.05453018471598625,
        0.5170992612838745,
        1.2617582082748413,
        0.2678912281990051,
        -1.125627040863037,
        -0.8155851364135742,
        -1.2402796745300293,
        0.30818799138069153,
        -1.2650938034057617,
        -1.1259901523590088,
        -0.03126020357012749,
        -0.7992589473724365,
        -0.21656928956508636,
        0.4912572205066681,
        -0.39381691813468933,
        0.23500947654247284,
        0.5653083920478821,
        -0.5942899584770203,
        -0.6028861403465271,
        -0.765754222869873,
        1.9524224996566772,
        -0.09134513139724731,
        2.8647849559783936,
        0.2522338330745697,
        -0.4147622883319855,
        -0.175376296043396,
        0.479920357465744,
        -0.6887468099594116,
        -0.7788618206977844,
        -0.08137050271034241,
        -0.4020689129829407,
        -1.8624080419540405,
        -0.7376241683959961,
        -0.07095587998628616,
        -0.33875495195388794,
        -1.7217307090759277,
        -1.7358533143997192,
        -0.17521153390407562,
        1.0983058214187622,
        2.080230236053467,
        0.2461424618959427,
        0.056939464062452316,
        -0.9155385494232178,
        -0.2655830383300781,
        -0.36218488216400146,
        1.2494882345199585,
        0.6400840282440186,
        -0.5944948196411133,
        -0.9156989455223083,
        -0.29224148392677307,
        0.000398893840610981,
        0.5066969394683838,
        -0.8513475060462952,
        -2.2093489170074463,
        0.7701357007026672,
        0.4971138834953308,
        -0.17974601686000824,
        -0.3951610028743744,
        0.21414555609226227,
        1.425434947013855,
        -2.11381196975708,
        1.6927639245986938,
        0.4101851284503937,
        -0.2612971365451813,
        0.9087801575660706,
    };

    const wgt: [48]f32 align(16) = .{
        0.4464472830295563,
        -0.2159852683544159,
        0.3203524053096771,
        -1.1469696760177612,
        0.6736926436424255,
        0.09117662161588669,
        0.8321336507797241,
        -1.1804358959197998,
        0.652496874332428,
        0.37972521781921387,
        0.12368397414684296,
        0.7623162269592285,
        0.14230948686599731,
        1.8882496356964111,
        1.6059881448745728,
        -1.756754994392395,
        -1.7679632902145386,
        0.9213694930076599,
        0.9365752339363098,
        1.2163522243499756,
        0.7103031873703003,
        -0.1470605581998825,
        0.9015635251998901,
        -0.3375947177410126,
        -0.743073046207428,
        -1.1409858465194702,
        1.5751973390579224,
        -1.6353367567062378,
        -0.24945706129074097,
        -1.433066487312317,
        1.2571264505386353,
        0.6727513670921326,
        -1.3212803602218628,
        0.9316658973693848,
        -0.026311039924621582,
        -0.45833852887153625,
        0.37666597962379456,
        -0.9461613893508911,
        1.7225455045700073,
        -0.6668154001235962,
        -0.48985251784324646,
        1.8513925075531006,
        0.7504340410232544,
        -0.011218084022402763,
        -1.1708964109420776,
        0.13502463698387146,
        1.3625211715698242,
        -1.1114213466644287,
    };

    const ref: [4]f32 align(16) = .{
        3.559849500656128,
        2.0816164016723633,
        -4.976558208465576,
        2.925950050354004,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    Conv_Direct_NCHW(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Direct test 4" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 2, 2 },
        .out0_shape = .{ 2, 2, 2, 4 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 1 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        1.987396478652954,
        -1.148497462272644,
        0.631702184677124,
        -1.6575950384140015,
        0.8031458258628845,
        0.0680411234498024,
        -0.27853214740753174,
        -1.6122695207595825,
        0.2522929012775421,
        0.9600071310997009,
        -0.05992518737912178,
        0.5614804029464722,
        -2.6331024169921875,
        1.8801807165145874,
        0.31352370977401733,
        0.648095965385437,
        0.615496039390564,
        -0.6336479187011719,
        -0.28514906764030457,
        0.059900641441345215,
        2.4753737449645996,
        -0.1697523295879364,
        0.5012633800506592,
        0.46151989698410034,
        0.3872928321361542,
        -1.3003829717636108,
        -1.0405430793762207,
        0.6300916075706482,
        0.5834575891494751,
        -1.2173032760620117,
        -0.9543614387512207,
        1.0009350776672363,
        -0.7746908068656921,
        2.011751890182495,
        2.1078622341156006,
        -0.5360468029975891,
        -0.10156745463609695,
        -1.8062326908111572,
        -0.7070255875587463,
        0.8786505460739136,
        0.020484130829572678,
        1.8632196187973022,
        -0.18904709815979004,
        -0.6512076258659363,
        0.35754385590553284,
        -0.5474016070365906,
        -0.5710374116897583,
        0.4089643955230713,
        -0.14764079451560974,
        1.3209611177444458,
        2.3405113220214844,
        -0.3989233076572418,
        0.20031346380710602,
        -0.6542381644248962,
        -0.07585986703634262,
        -0.6411372423171997,
        0.5838520526885986,
        -0.548269510269165,
        0.5009931325912476,
        -0.06348617374897003,
        -0.2599007785320282,
        -0.19752448797225952,
        -0.7864674925804138,
        -0.006343912798911333,
        0.44678935408592224,
        -0.4049520194530487,
        1.1363781690597534,
        -0.030334236100316048,
        0.9673218727111816,
        -0.36166876554489136,
        -0.9603636860847473,
        1.8221906423568726,
        -1.0593236684799194,
        -1.4472531080245972,
        -0.5001323223114014,
        0.08114513009786606,
        1.1374800205230713,
        0.4233969748020172,
        -0.04699119180440903,
        -0.42963606119155884,
        -0.29579809308052063,
        1.3496975898742676,
        0.10337156802415848,
        -1.2381809949874878,
        0.06558437645435333,
        1.927069902420044,
        -1.0623912811279297,
        1.459747076034546,
        -0.12386929243803024,
        0.5868632197380066,
        -1.2088778018951416,
        -2.657153606414795,
        -1.4020359516143799,
        1.599851369857788,
        0.22161032259464264,
        0.4660962224006653,
        -0.04320177435874939,
        0.8182485103607178,
        -0.7496235370635986,
        -0.3452191948890686,
        -0.6642535328865051,
        0.33868974447250366,
        0.15863846242427826,
        0.23515628278255463,
        -1.8893553018569946,
        1.1939258575439453,
        -0.6042184829711914,
        1.7488102912902832,
        0.7122832536697388,
        1.4211009740829468,
        -0.4725058376789093,
        -0.039808403700590134,
        -0.5706375241279602,
        -0.2628849744796753,
        -1.7909598350524902,
        -0.1677352488040924,
        -0.46305137872695923,
        0.06091703847050667,
        0.3498498201370239,
        -0.846631646156311,
    };

    const wgt: [32]f32 align(16) = .{
        1.1794005632400513,
        -0.8522893786430359,
        2.1943705081939697,
        -0.6350838541984558,
        -0.1314818114042282,
        0.4182584285736084,
        -1.7846121788024902,
        0.19893600046634674,
        -0.5499987602233887,
        -0.6348475813865662,
        -2.100801467895508,
        -0.8543321490287781,
        1.2648720741271973,
        -1.0509275197982788,
        0.06892473995685577,
        1.246412992477417,
        0.6945737600326538,
        1.6961759328842163,
        0.289834588766098,
        -1.1185625791549683,
        -1.560483694076538,
        0.2874985635280609,
        2.418936252593994,
        -1.2910703420639038,
        0.20447467267513275,
        -0.9380654096603394,
        1.030322551727295,
        -0.6826833486557007,
        0.45931991934776306,
        -1.1928954124450684,
        -0.5510044693946838,
        -0.71571284532547,
    };

    const ref: [32]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [32]f32 align(16) = .{0} ** 32;
    Conv_Direct_NCHW(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Direct test 5" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 2, 2 },
        .out0_shape = .{ 2, 2, 2, 3 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 2, 3 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        -0.5076006054878235,
        0.4132881760597229,
        1.2333056926727295,
        0.11752575635910034,
        -0.5564525127410889,
        -0.17064589262008667,
        0.9169334173202515,
        0.9189508557319641,
        -0.8833380341529846,
        1.061716079711914,
        0.058551862835884094,
        -1.7734936475753784,
        1.467450737953186,
        -0.7813355922698975,
        0.06616606563329697,
        -2.2076284885406494,
        1.0049771070480347,
        0.9065656065940857,
        -0.11089929938316345,
        0.48826009035110474,
        1.097382664680481,
        -0.37109577655792236,
        -1.2624237537384033,
        -0.9282457828521729,
        1.0459587574005127,
        0.9525542259216309,
        -0.00941470731049776,
        0.7991068363189697,
        -0.24445132911205292,
        0.7020065784454346,
        1.1043903827667236,
        -0.34053757786750793,
        -1.4640161991119385,
        -0.862644374370575,
        -0.06372691690921783,
        0.3080814778804779,
        0.686951756477356,
        -2.0701844692230225,
        1.464410424232483,
        -0.2806311249732971,
        0.7645492553710938,
        0.1519695371389389,
        -0.8773966431617737,
        0.6586463451385498,
        0.02857092022895813,
        -0.5688871145248413,
        -0.09891805052757263,
        -0.053290918469429016,
        0.5948866009712219,
        0.3443223834037781,
        -1.203821063041687,
        -0.905780553817749,
        -0.510521411895752,
        -0.9823528528213501,
        1.2944941520690918,
        -0.6155856251716614,
        -0.059768106788396835,
        1.0417377948760986,
        0.1786179095506668,
        1.5093348026275635,
        -0.9922963976860046,
        -0.27906328439712524,
        0.11354037374258041,
        -0.6392114162445068,
        0.32551389932632446,
        -0.49530261754989624,
        -1.1296108961105347,
        -0.10933046042919159,
        -1.1593133211135864,
        -0.106833815574646,
        0.23432950675487518,
        -2.3125624656677246,
        0.6489582657814026,
        0.1111593246459961,
        -0.303737074136734,
        1.1442903280258179,
        0.07167882472276688,
        0.2821207642555237,
        0.33432862162590027,
        -0.49624791741371155,
        -1.0543293952941895,
        0.6777920126914978,
        -1.6310731172561646,
        0.9793100357055664,
        0.21695204079151154,
        -0.0018354778876528144,
        -1.3045750856399536,
        0.16383205354213715,
        -1.468850016593933,
        0.5023068785667419,
        0.8278137445449829,
        -0.8866307735443115,
        1.6403684616088867,
        0.6906569004058838,
        -0.8923995494842529,
        -2.7591514587402344,
        0.4875650107860565,
        2.1655139923095703,
        -1.2782198190689087,
        1.766494631767273,
        -0.27297744154930115,
        -0.5260857343673706,
        0.7175928354263306,
        0.43653592467308044,
        3.2837111949920654,
        -0.47067582607269287,
        0.0811210423707962,
        -0.5233661532402039,
        0.050231754779815674,
        -0.9632849097251892,
        0.3696647882461548,
        0.19800342619419098,
        1.2028532028198242,
        -1.40123450756073,
        -1.0808913707733154,
        -1.1274958848953247,
        1.4894990921020508,
        -2.0786783695220947,
        -0.09966214746236801,
        -1.4876121282577515,
    };

    const wgt: [32]f32 align(16) = .{
        -1.242492914199829,
        -0.3165457844734192,
        -0.9317850470542908,
        -1.486067533493042,
        2.2434988021850586,
        0.44947606325149536,
        -0.4451305866241455,
        -0.8766859769821167,
        1.6715846061706543,
        -1.1754443645477295,
        -0.9407185912132263,
        -0.24530304968357086,
        0.2584797143936157,
        -0.6352376937866211,
        -0.7091923356056213,
        -1.4831931591033936,
        0.3677287697792053,
        0.8353595733642578,
        0.2264735996723175,
        2.982347249984741,
        1.0692012310028076,
        -0.15315285325050354,
        0.5516690611839294,
        -0.8483901023864746,
        0.28642675280570984,
        1.212868094444275,
        0.2630717158317566,
        -0.5989546775817871,
        0.9491865038871765,
        -0.28718632459640503,
        2.2177655696868896,
        -0.7110396027565002,
    };

    const ref: [24]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [24]f32 align(16) = .{0} ** 24;
    Conv_Direct_NCHW(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}
