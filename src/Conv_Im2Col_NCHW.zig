const std = @import("std");
const testing = std.testing;
const GetStride = @import("util.zig").GetStride;
const ConvConfig = @import("ConvConfig.zig").ConvConfig;
const ConvLayout = @import("ConvConfig.zig").ConvLayout;
const ComputeScratchSize = @import("ConvConfig.zig").ComputeScratchSize;
const ConvBackend = @import("ConvConfig.zig").ConvBackend;
const blas = @cImport({
    @cInclude("cblas.h");
});

pub noinline fn Conv_Im2Col_NCHW(
    comptime config: anytype,
    noalias inp0: []align(config.A) const config.T,
    noalias inp1: []align(config.A) const config.T,
    noalias out0: []align(config.A) config.T,
    noalias scr0: []align(config.A) config.T,
) void {
    // read inp shape (N, C, H, W)
    const iN = config.inp0_shape[0]; // batch size
    const iN_stride = comptime GetStride(config.inp0_shape, 0);
    const iC = config.inp0_shape[1]; // input channels
    const iC_stride = comptime GetStride(config.inp0_shape, 1);
    const iH = config.inp0_shape[2]; // input height
    const iH_stride = comptime GetStride(config.inp0_shape, 2);
    const iW = config.inp0_shape[3]; // input width
    const iW_stride = comptime GetStride(config.inp0_shape, 3);

    // read wgt shape (M, C, R, S)
    const kM = config.inp1_shape[0]; // output channels
    const kM_stride = comptime GetStride(config.inp1_shape, 0);
    const kC = config.inp1_shape[1]; // input channels
    const kC_stride = comptime GetStride(config.inp1_shape, 1);
    const kH = config.inp1_shape[2]; // kernel height
    const kH_stride = comptime GetStride(config.inp1_shape, 2);
    const kW = config.inp1_shape[3]; // kernel width
    const kW_stride = comptime GetStride(config.inp1_shape, 3);

    _ = kM_stride;
    _ = kC_stride;
    _ = kH_stride;
    _ = kW_stride;

    // read out shape (N, C, H, W)
    const oN = config.out0_shape[0]; // batch size
    const oN_stride = comptime GetStride(config.out0_shape, 0);
    const oC = config.out0_shape[1]; // output channels
    const oC_stride = comptime GetStride(config.out0_shape, 1);
    const oH = config.out0_shape[2]; // output height
    const oH_stride = comptime GetStride(config.out0_shape, 2);
    const oW = config.out0_shape[3]; // output width
    const oW_stride = comptime GetStride(config.out0_shape, 3);

    // not required in this impl
    _ = oC_stride;
    _ = oH_stride;
    _ = oW_stride;

    // Impl for NHWC input layout
    // We want to do: C = A x B
    // A = (oH x oW, iC x kH x kW)
    // B = (kC == iC x kH x kW, kM)
    // C = A @ B --> (oH x oW, oM) --> but we want (oM, oH x oW);
    // Hence: C.T = (A @ B).T --> B.T @ A.T
    // B.T = (kM, kC == iC x kH x kW) --> AS IS for inp1
    // A.T = (iC x kH x kW, oH x oW)

    const M = kM;
    const N = iC * kH * kW;
    const K = oH * oW;

    const A_oH_stride = GetStride(.{ oH, oW, iC, kH, kW }, 0);
    const A_oW_stride = GetStride(.{ oH, oW, iC, kH, kW }, 1);
    const A_iC_stride = GetStride(.{ oH, oW, iC, kH, kW }, 2);
    const A_kH_stride = GetStride(.{ oH, oW, iC, kH, kW }, 3);
    const A_kW_stride = GetStride(.{ oH, oW, iC, kH, kW }, 4);

    // sanitize impl
    if (comptime iC != kC) {
        @compileError("Input channel count does not match weight input channel count");
    }

    if (comptime kM != oC) {
        @compileError("Output channel count does not match weight output channel count");
    }

    if (comptime iN != oN) {
        @compileError("Input batch size does not match output batch size");
    }

    const inp1_len = config.inp1_shape[0] * config.inp1_shape[1] * //
        config.inp1_shape[2] * config.inp1_shape[3];
    if (inp1_len != M * N) {
        @compileError(
            std.fmt.comptimePrint(
                "inp1 misdimensioned: {} x {} != {}",
                .{ M, N, inp1_len },
            ),
        );
    }

    const out0_len = config.out0_shape[0] * config.out0_shape[1] * //
        config.out0_shape[2] * config.out0_shape[3];
    if (out0_len != oN * M * K) {
        @compileError(
            std.fmt.comptimePrint(
                "out0 misdimensioned: {} x {} != {}",
                .{ M, K, out0_len },
            ),
        );
    }

    const scr0_len = comptime ComputeScratchSize(config);
    if (scr0_len != K * N) {
        @compileError(
            std.fmt.comptimePrint(
                "scr0 misdimensioned: {} x {} != {}",
                .{ K, N, scr0_len },
            ),
        );
    }

    // stride
    const SH = config.strides[0];
    const SW = config.strides[1];

    // dilation
    const DH = config.dilations[0];
    const DW = config.dilations[1];

    // padding
    const PH: isize = @intCast(config.pads[0]);
    const PW: isize = @intCast(config.pads[1]);

    for (0..iN) |n| {
        const in_stride = n * iN_stride;
        const on_stride = n * oN_stride;

        for (0..iC) |ic| {
            const A_ic_stride = ic * A_iC_stride;

            const ic_stride = ic * iC_stride;
            for (0..kH) |kh| {
                const A_kh_stride = kh * A_kH_stride;
                for (0..kW) |kw| {
                    const A_kw_stride = kw * A_kW_stride;
                    for (0..oH) |oh| {
                        const A_oh_stride = oh * A_oH_stride;

                        const ih = @as(isize, @intCast(oh * SH + kh * DH)) - PH;
                        if (0 <= ih and ih < iH) {
                            const ih_stride = @as(usize, @intCast(ih)) * iH_stride;
                            for (0..oW) |ow| {
                                const A_ow_stride = ow * A_oW_stride;

                                const iw = @as(isize, @intCast(ow * SW + kw * DW)) - PW;
                                if (0 <= iw and iw < iW) {
                                    const iw_stride = @as(usize, @intCast(iw)) * iW_stride;
                                    const inp = inp0[in_stride + ic_stride + ih_stride + iw_stride];
                                    const dst = A_ic_stride + A_kh_stride + A_kw_stride + A_oh_stride + A_ow_stride;
                                    scr0[dst] = inp;
                                }
                            }
                        }
                    }
                }
            }
        }

        blas.cblas_sgemm(
            blas.CblasRowMajor,
            blas.CblasNoTrans,
            blas.CblasTrans,
            M,
            K,
            N,
            1.0,
            &inp1[0],
            N,
            &scr0[0],
            N,
            0.0,
            &out0[on_stride],
            K,
        );
    }
}

test "NCHW Im2Col test 1" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 1, 1, 5, 3 },
        .inp1_shape = .{ 1, 1, 2, 3 },
        .out0_shape = .{ 1, 1, 4, 1 },
        .kernel_shape = .{ 2, 3 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [15]f32 align(16) = .{
        1.2670979499816895,
        0.9016841650009155,
        -0.5240172743797302,
        -0.35082173347473145,
        -0.6083552837371826,
        -1.03061044216156,
        1.174942135810852,
        -0.04015866294503212,
        -0.7401800155639648,
        0.9114257097244263,
        -0.7443938851356506,
        1.9249143600463867,
        0.7599474191665649,
        0.06893974542617798,
        -1.23640775680542,
    };

    const wgt: [6]f32 align(16) = .{
        0.1673666387796402,
        -0.921737015247345,
        0.3241814970970154,
        -0.1426408737897873,
        0.8089857697486877,
        1.748797059059143,
    };

    const ref: [4]f32 align(16) = .{
        -3.033360242843628,
        -1.3265842199325562,
        2.6277830600738525,
        -0.7521552443504333,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    var scr: [24]f32 align(16) = .{0} ** 24;
    Conv_Im2Col_NCHW(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Im2Col test 2" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 3, 2 },
        .out0_shape = .{ 2, 2, 1, 4 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -1.215955376625061,
        -1.2729531526565552,
        -1.4216028451919556,
        -0.3869200348854065,
        0.3818664848804474,
        -0.1931246668100357,
        1.6585335731506348,
        -1.0799496173858643,
        0.3112156093120575,
        -0.6826468110084534,
        -0.14988970756530762,
        -1.407634973526001,
        0.6961924433708191,
        -0.40891605615615845,
        -0.4425651729106903,
        -0.2559860944747925,
        2.5490729808807373,
        1.40457284450531,
        1.3177306652069092,
        0.34390440583229065,
        0.11222773045301437,
        0.42854073643684387,
        0.9649615287780762,
        -0.024211460724473,
        0.7537682056427002,
        0.45584261417388916,
        0.03428423032164574,
        -0.9555938839912415,
        0.8979120254516602,
        0.6367303133010864,
        -0.318813681602478,
        1.7787367105484009,
        -1.6627262830734253,
        -0.22619104385375977,
        1.7264295816421509,
        0.5366449356079102,
        -0.8534911274909973,
        1.482049584388733,
        1.302973985671997,
        0.9140475392341614,
        -0.4403008222579956,
        -0.6959159970283508,
        1.5171151161193848,
        0.8567203879356384,
        -0.6436029076576233,
        1.0968005657196045,
        -0.8936200141906738,
        1.2217652797698975,
        -0.2246142476797104,
        -1.2554104328155518,
        -0.5537305474281311,
        -0.5274165272712708,
        -0.713330864906311,
        -0.4595404267311096,
        0.08441071212291718,
        1.3709322214126587,
        -0.16673628985881805,
        2.6370513439178467,
        1.1815822124481201,
        -0.7800900340080261,
        1.6692944765090942,
        0.7330092191696167,
        -0.6574215888977051,
        -1.2076222896575928,
        2.485938310623169,
        -2.268178701400757,
        -1.7845542430877686,
        -0.7396507263183594,
        0.6386685371398926,
        0.4655168056488037,
        -0.7475548982620239,
        -1.4142903089523315,
        -0.028368311002850533,
        0.6354861259460449,
        1.661110758781433,
        -1.3278993368148804,
        1.4997010231018066,
        -2.5620577335357666,
        -1.0561885833740234,
        -1.798853874206543,
        1.0821325778961182,
        1.4711490869522095,
        0.6859760284423828,
        -0.3078373670578003,
        -0.27145934104919434,
        -1.1346862316131592,
        -0.3836590349674225,
        0.40091198682785034,
        0.8987159729003906,
        -0.29306718707084656,
        -0.15093211829662323,
        -1.5073596239089966,
        -0.1561894416809082,
        0.3184548020362854,
        0.790645956993103,
        0.03628851845860481,
        -0.3792576491832733,
        2.431685447692871,
        0.009426194243133068,
        0.0631272941827774,
        0.7301069498062134,
        1.2783674001693726,
        0.6475540399551392,
        0.03943582624197006,
        -1.7154350280761719,
        -0.8356488943099976,
        0.3298022747039795,
        -0.05569330230355263,
        0.6012313961982727,
        -0.07978173345327377,
        -0.14466546475887299,
        1.3609949350357056,
        -1.0690423250198364,
        1.2317180633544922,
        -0.35612696409225464,
        0.9868869781494141,
        -0.7878373265266418,
        0.9115824103355408,
        -0.8543899059295654,
        0.03522114455699921,
    };

    const wgt: [48]f32 align(16) = .{
        0.43182745575904846,
        0.8318055868148804,
        -0.9083802700042725,
        0.09592409431934357,
        -1.323853611946106,
        -0.38166019320487976,
        -0.29367169737815857,
        0.11947573721408844,
        -0.762839138507843,
        -1.3498265743255615,
        0.8908765912055969,
        1.4102981090545654,
        1.4471982717514038,
        -1.190183401107788,
        -1.9329110383987427,
        -0.9509470462799072,
        0.30337953567504883,
        -0.1018482968211174,
        -0.06800353527069092,
        -1.0007350444793701,
        -0.1955263763666153,
        -0.6431934237480164,
        -0.3155670166015625,
        0.35485997796058655,
        1.7200565338134766,
        -0.4294346868991852,
        0.22374553978443146,
        -0.20102043449878693,
        -0.891411304473877,
        0.4796842038631439,
        -1.3137187957763672,
        -0.787256121635437,
        0.6361607909202576,
        -0.7812047600746155,
        -0.04632876068353653,
        0.41823241114616394,
        -0.3444560170173645,
        -0.24987062811851501,
        0.3840636610984802,
        1.0022403001785278,
        -0.02887144684791565,
        -0.9997283816337585,
        0.6538450717926025,
        1.2499969005584717,
        -1.8270533084869385,
        -1.6017897129058838,
        0.482677698135376,
        0.7292382717132568,
    };

    const ref: [16]f32 align(16) = .{
        -2.434998035430908,
        -0.4556143283843994,
        -6.937865734100342,
        -3.9212608337402344,
        -2.682467222213745,
        -0.38370367884635925,
        1.0659873485565186,
        -2.1803784370422363,
        1.2012052536010742,
        -1.5942915678024292,
        -5.510924339294434,
        0.5569791793823242,
        -0.9938642382621765,
        4.993618488311768,
        6.027310848236084,
        -0.5091915726661682,
    };

    var out: [16]f32 align(16) = .{0} ** 16;
    var scr: [96]f32 align(16) = .{0} ** 96;
    Conv_Im2Col_NCHW(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Im2Col test 3" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 3, 2 },
        .out0_shape = .{ 2, 2, 1, 1 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 3, 4 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -0.02601720578968525,
        0.0009718046057969332,
        0.9872420430183411,
        -0.9731175899505615,
        -1.731579303741455,
        1.5050837993621826,
        0.9389158487319946,
        0.10161764919757843,
        0.2608821988105774,
        0.08503289520740509,
        0.6935920715332031,
        -1.4199601411819458,
        -0.27668264508247375,
        0.17787905037403107,
        -0.7897251844406128,
        1.7599081993103027,
        0.447628915309906,
        -1.6086556911468506,
        0.777504563331604,
        0.48507827520370483,
        0.29986947774887085,
        -1.092556357383728,
        0.44762682914733887,
        1.4654074907302856,
        -2.226353168487549,
        0.7107264995574951,
        0.724075973033905,
        -2.770292282104492,
        -1.813058614730835,
        0.3256165087223053,
        -0.6204466223716736,
        -0.39430248737335205,
        0.7954730987548828,
        0.08677135407924652,
        -0.5551473498344421,
        0.19933010637760162,
        -1.1422916650772095,
        -0.4909333288669586,
        -0.9061048626899719,
        0.08337551355361938,
        -0.19783490896224976,
        0.241909459233284,
        -0.3188948333263397,
        -0.09306379407644272,
        -0.7764416337013245,
        1.153913140296936,
        -0.16685041785240173,
        -1.9607923030853271,
        -0.5198222398757935,
        -0.16159668564796448,
        -0.3034974932670593,
        -0.4456455707550049,
        1.1664882898330688,
        1.647430658340454,
        2.223557472229004,
        -0.3618681728839874,
        -0.9705545902252197,
        -1.8712903261184692,
        1.3445405960083008,
        -1.0468770265579224,
        0.8802468776702881,
        0.9404873847961426,
        -0.7722664475440979,
        0.9416328072547913,
        -0.15677134692668915,
        -0.2856121361255646,
        0.16439619660377502,
        -0.003768736030906439,
        1.8235760927200317,
        0.8870673179626465,
        1.1046440601348877,
        2.3797430992126465,
        1.0682810544967651,
        1.3624439239501953,
        -0.5915176272392273,
        -0.005291234701871872,
        0.5967130661010742,
        1.6296639442443848,
        -1.577645182609558,
        -0.44306719303131104,
        0.07061450928449631,
        -2.4922022819519043,
        0.9703540802001953,
        -0.3890639841556549,
        -1.0789151191711426,
        0.9967071413993835,
        1.2082397937774658,
        0.9257234334945679,
        0.00337075162678957,
        -0.12071570008993149,
        0.1572081595659256,
        -0.8850844502449036,
        0.5067530274391174,
        0.6780069470405579,
        1.3605166673660278,
        0.3204313814640045,
        -0.631730318069458,
        -0.5694898366928101,
        0.5392320156097412,
        -1.0012232065200806,
        0.010826709680259228,
        0.11141850054264069,
        -0.7349238991737366,
        -1.4327858686447144,
        -0.4878484010696411,
        0.9409173727035522,
        -0.9434689879417419,
        0.09650406986474991,
        -1.6848174333572388,
        -1.271323561668396,
        0.9101622104644775,
        -1.2426385879516602,
        1.2527782917022705,
        0.31296002864837646,
        -0.08180608600378036,
        -2.188952922821045,
        0.09229353070259094,
        -0.8954932689666748,
        -0.3611712157726288,
        -0.12309987843036652,
    };

    const wgt: [48]f32 align(16) = .{
        1.5434385538101196,
        1.8958176374435425,
        0.20036669075489044,
        -0.3388284742832184,
        -1.0526753664016724,
        0.5081182718276978,
        0.16730056703090668,
        -0.9641796350479126,
        -2.068826198577881,
        1.1675829887390137,
        -1.6119965314865112,
        -0.5959386229515076,
        1.0533924102783203,
        0.23163366317749023,
        -0.6978519558906555,
        -0.5737500786781311,
        -0.40048515796661377,
        1.3726550340652466,
        0.9122263789176941,
        -0.6532589197158813,
        0.45091474056243896,
        0.9730076193809509,
        1.246909260749817,
        -0.23755335807800293,
        0.38736867904663086,
        0.4023534953594208,
        -0.26835161447525024,
        -1.0757899284362793,
        0.857048511505127,
        -0.819126546382904,
        0.8375991582870483,
        -1.108824610710144,
        0.026282168924808502,
        -1.155785322189331,
        -1.28609037399292,
        -0.9631534218788147,
        1.3082091808319092,
        -2.406857967376709,
        -0.12430689483880997,
        1.6938203573226929,
        -1.9833179712295532,
        -0.4799433946609497,
        -1.801673173904419,
        1.2707767486572266,
        -0.3536742031574249,
        -0.3922618627548218,
        -1.4707565307617188,
        0.7607758641242981,
    };

    const ref: [4]f32 align(16) = .{
        -4.563725471496582,
        -2.790144920349121,
        -4.711212635040283,
        1.099372148513794,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    var scr: [24]f32 align(16) = .{0} ** 24;
    Conv_Im2Col_NCHW(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Im2Col test 4" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 2, 2 },
        .out0_shape = .{ 2, 2, 2, 4 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 1 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        -0.5303593873977661,
        -0.7979133725166321,
        -1.0772093534469604,
        0.1625971645116806,
        -1.0133978128433228,
        0.18476232886314392,
        -2.8676936626434326,
        0.03318355605006218,
        -2.1584746837615967,
        -1.6262810230255127,
        1.2019000053405762,
        0.8376004695892334,
        -1.0764602422714233,
        0.3069547712802887,
        0.03428267315030098,
        0.7103904485702515,
        0.033505525439977646,
        -0.5118443965911865,
        0.6376341581344604,
        0.21521970629692078,
        -0.5239821672439575,
        -1.8776025772094727,
        0.3085057735443115,
        -0.8342459201812744,
        1.7204782962799072,
        0.1927102953195572,
        -1.3546100854873657,
        0.045666713267564774,
        0.36587420105934143,
        -1.8991962671279907,
        -2.182345151901245,
        1.1586105823516846,
        0.15144257247447968,
        -1.972339391708374,
        0.7748552560806274,
        -0.9077083468437195,
        -0.43812575936317444,
        -1.203309178352356,
        -1.5335532426834106,
        -1.1055811643600464,
        2.2304904460906982,
        -0.21235547959804535,
        -1.5028001070022583,
        0.3776025176048279,
        0.04270697757601738,
        -0.29727867245674133,
        0.39014971256256104,
        0.011608617380261421,
        -0.44329214096069336,
        -0.6791591644287109,
        0.413940966129303,
        -2.043368339538574,
        0.11366976052522659,
        1.1547073125839233,
        0.28720521926879883,
        0.2284334897994995,
        -0.0815807431936264,
        -0.5386186838150024,
        0.5701137185096741,
        2.191567897796631,
        -0.29305723309516907,
        0.30302855372428894,
        -0.6253685355186462,
        0.036949511617422104,
        0.9081546664237976,
        0.14697329699993134,
        -0.06047552824020386,
        -0.435772180557251,
        -0.8855651617050171,
        -1.2115334272384644,
        0.69951993227005,
        -0.47608041763305664,
        -1.1520977020263672,
        -1.0006078481674194,
        -1.0709370374679565,
        -0.32900479435920715,
        -0.8939754962921143,
        1.2973302602767944,
        0.9926087260246277,
        0.11014071106910706,
        0.28817251324653625,
        0.30011406540870667,
        -0.003680039197206497,
        0.5024184584617615,
        1.9249107837677002,
        -2.0637619495391846,
        -0.4847315847873688,
        0.4669542908668518,
        -0.3268359303474426,
        -0.1682090312242508,
        2.5117547512054443,
        2.370246648788452,
        -1.1414824724197388,
        0.8141441941261292,
        0.046562764793634415,
        -1.0005919933319092,
        0.7614074349403381,
        1.1603045463562012,
        -0.452798992395401,
        -1.2217741012573242,
        0.2518051862716675,
        -0.18355073034763336,
        -0.5158283710479736,
        -2.754765748977661,
        -0.18102788925170898,
        0.7441521286964417,
        -0.597678005695343,
        1.2082098722457886,
        -0.7026098370552063,
        -1.1213781833648682,
        1.2361903190612793,
        -1.3145852088928223,
        0.2689823806285858,
        0.9294028282165527,
        -0.587644636631012,
        -0.002859650645405054,
        -3.290506601333618,
        1.0266404151916504,
        0.8391286730766296,
        0.4927193820476532,
    };

    const wgt: [32]f32 align(16) = .{
        -0.13474144041538239,
        1.7970658540725708,
        0.16799819469451904,
        0.33205586671829224,
        0.6337325572967529,
        -0.46189388632774353,
        -0.7184812426567078,
        0.7137889266014099,
        0.03158113360404968,
        2.9247684478759766,
        0.8114277720451355,
        -0.2805527448654175,
        0.7787240147590637,
        0.4149746000766754,
        1.7518070936203003,
        1.8002557754516602,
        0.23989425599575043,
        -0.9796459078788757,
        -2.1026344299316406,
        -0.43993285298347473,
        0.7368578910827637,
        -0.3372766673564911,
        -0.5586172342300415,
        -0.5485324859619141,
        0.4466352164745331,
        0.4244455099105835,
        -1.2818025350570679,
        0.13897329568862915,
        1.8365222215652466,
        1.1407331228256226,
        -0.14081332087516785,
        -0.45512455701828003,
    };

    const ref: [32]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [32]f32 align(16) = .{0} ** 32;
    var scr: [128]f32 align(16) = .{0} ** 128;
    Conv_Im2Col_NCHW(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NCHW Im2Col test 5" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NCHW, ConvBackend.Direct){
        .inp0_shape = .{ 2, 4, 3, 5 },
        .inp1_shape = .{ 2, 4, 2, 2 },
        .out0_shape = .{ 2, 2, 2, 3 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 2, 3 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        -1.5095664262771606,
        0.28732943534851074,
        -0.4564524292945862,
        -0.3805401623249054,
        1.373623013496399,
        -1.047876000404358,
        1.0287333726882935,
        -0.38566499948501587,
        -0.8216137886047363,
        -0.29391762614250183,
        0.1126701682806015,
        -0.9449477195739746,
        -1.0386968851089478,
        -0.20475687086582184,
        -1.547825574874878,
        -0.574467122554779,
        -0.5108497738838196,
        -0.034976355731487274,
        -0.9109991192817688,
        -1.029066801071167,
        -0.4505603611469269,
        -0.15620648860931396,
        0.7133921384811401,
        -0.26508158445358276,
        -1.2894628047943115,
        -0.22218048572540283,
        0.008333648554980755,
        0.002254913095384836,
        0.7028492093086243,
        -1.5286078453063965,
        2.557670831680298,
        -0.5232903361320496,
        -1.0976414680480957,
        0.8100188970565796,
        -0.9894195199012756,
        2.0215718746185303,
        -0.16883814334869385,
        1.1637665033340454,
        0.48830920457839966,
        -0.6057102680206299,
        -0.2918027639389038,
        -0.3560127019882202,
        0.5239759087562561,
        0.4292208254337311,
        1.9689645767211914,
        -0.9095520377159119,
        -0.4595372676849365,
        -0.9222432971000671,
        -0.7314358949661255,
        1.9948173761367798,
        -0.8286310434341431,
        2.5711021423339844,
        -0.9961469769477844,
        -0.6150994300842285,
        0.8805274963378906,
        -1.6919664144515991,
        -1.1697943210601807,
        -0.7208388447761536,
        1.3561402559280396,
        -0.8164771199226379,
        -0.18574191629886627,
        -0.4030308127403259,
        1.5809441804885864,
        0.44825026392936707,
        -0.7509122490882874,
        -0.6160210967063904,
        0.6560045480728149,
        -0.7517331838607788,
        -0.03511478379368782,
        0.7358167171478271,
        0.387849360704422,
        -0.7426236867904663,
        -0.6030043959617615,
        -0.08712630718946457,
        -0.8291186094284058,
        -0.3067796230316162,
        -0.25463569164276123,
        0.0810089185833931,
        2.155374765396118,
        1.3986455202102661,
        1.0295228958129883,
        -1.5226850509643555,
        -0.14587722718715668,
        0.5951980352401733,
        -0.517164409160614,
        0.5360499620437622,
        0.0656900554895401,
        -2.5950064659118652,
        -2.0072567462921143,
        0.3905508816242218,
        1.233289122581482,
        0.1099262535572052,
        -0.11813575774431229,
        -1.1053383350372314,
        -0.4571824073791504,
        -0.07821305841207504,
        -0.6246294975280762,
        0.2294289767742157,
        2.132352828979492,
        0.6437305212020874,
        -0.26375696063041687,
        1.3893803358078003,
        -1.22490656375885,
        -0.5538453459739685,
        -0.6548348069190979,
        -0.1424059420824051,
        -0.6710230112075806,
        -0.9561284780502319,
        -0.21013256907463074,
        0.5097612738609314,
        -0.05099194496870041,
        0.6870256066322327,
        0.4883278012275696,
        0.5176229476928711,
        0.1882060170173645,
        1.6440186500549316,
        -0.19769303500652313,
        0.5877939462661743,
        -0.9125580787658691,
        0.5851268768310547,
    };

    const wgt: [32]f32 align(16) = .{
        0.8096710443496704,
        1.2086217403411865,
        0.6369963884353638,
        0.8202865123748779,
        -0.8740276098251343,
        1.3978503942489624,
        0.02109324373304844,
        -0.06220205873250961,
        0.5182985067367554,
        0.10127008706331253,
        0.0021460906136780977,
        2.1704885959625244,
        2.2954776287078857,
        0.02204347401857376,
        0.9939702153205872,
        -0.10269497334957123,
        0.21699826419353485,
        0.6747996211051941,
        1.7700746059417725,
        0.4206852316856384,
        -1.079459547996521,
        -0.48934808373451233,
        -1.9891051054000854,
        0.051792554557323456,
        1.2847013473510742,
        0.24473802745342255,
        1.3569440841674805,
        -0.49184176325798035,
        0.3228350281715393,
        0.17349335551261902,
        0.9215121269226074,
        1.194865107536316,
    };

    const ref: [24]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [24]f32 align(16) = .{0} ** 24;
    var scr: [96]f32 align(16) = .{0} ** 96;
    Conv_Im2Col_NCHW(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}
