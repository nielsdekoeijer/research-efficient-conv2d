const std = @import("std");
const testing = std.testing;
const GetStride = @import("util.zig").GetStride;
const ConvConfig = @import("ConvConfig.zig").ConvConfig;
const ConvLayout = @import("ConvConfig.zig").ConvLayout;
const ConvBackend = @import("ConvConfig.zig").ConvBackend;

pub noinline fn Conv_Direct_NHWC(
    comptime config: anytype,
    noalias inp0: []align(config.A) const config.T,
    noalias inp1: []align(config.A) const config.T,
    noalias out0: []align(config.A) config.T,
) void {
    // read inp shape (N, H, W, C)
    const iN = config.inp0_shape[0]; // batch size
    const iN_stride = comptime GetStride(config.inp0_shape, 0);
    const iH = config.inp0_shape[1]; // input height
    const iH_stride = comptime GetStride(config.inp0_shape, 1);
    const iW = config.inp0_shape[2]; // input width
    const iW_stride = comptime GetStride(config.inp0_shape, 2);
    const iC = config.inp0_shape[3]; // input channels
    const iC_stride = comptime GetStride(config.inp0_shape, 3);

    _ = iC_stride;

    // read wgt shape (M, H, W, C)
    const kM = config.inp1_shape[0]; // output channels
    const kM_stride = comptime GetStride(config.inp1_shape, 0);
    const kH = config.inp1_shape[1]; // kernel height
    const kH_stride = comptime GetStride(config.inp1_shape, 1);
    const kW = config.inp1_shape[2]; // kernel width
    const kW_stride = comptime GetStride(config.inp1_shape, 2);
    const kC = config.inp1_shape[3]; // input channels
    const kC_stride = comptime GetStride(config.inp1_shape, 3);

    _ = kC_stride;

    // read out shape (N, H, W, C)
    const oN = config.out0_shape[0]; // batch size
    const oN_stride = comptime GetStride(config.out0_shape, 0);
    const oH = config.out0_shape[1]; // output height
    const oH_stride = comptime GetStride(config.out0_shape, 1);
    const oW = config.out0_shape[2]; // output width
    const oW_stride = comptime GetStride(config.out0_shape, 2);
    const oC = config.out0_shape[3]; // output channels
    const oC_stride = comptime GetStride(config.out0_shape, 3);

    // sanity
    if (comptime iC != kC) {
        @compileError("Input channel count does not match weight input channel count");
    }

    if (comptime kM != oC) {
        @compileError("Output channel count does not match weight output channel count");
    }

    if (comptime iN != oN) {
        @compileError("Input batch size does not match output batch size");
    }

    // stride
    const SH = config.strides[0];
    const SW = config.strides[1];

    // dilation
    const DH = config.dilations[0];
    const DW = config.dilations[1];

    // padding
    const PH: isize = @intCast(config.pads[0]);
    const PW: isize = @intCast(config.pads[2]);

    // impl for NHWC input layout
    for (0..iN) |n| { // for each batch
        const in_stride = n * iN_stride;
        const on_stride = n * oN_stride;
        for (0..oH) |oh| { // for each output height
            const oh_stride = oh * oH_stride;
            for (0..oW) |ow| { // for each output width
                const ow_stride = ow * oW_stride;
                for (0..oC) |oc| { // for each output channel
                    const oc_stride = oc * oC_stride;
                    const km_stride = oc * kM_stride;
                    var acc = @as(config.T, 0);
                    for (0..kH) |kh| { // for each kernel height
                        const ih = @as(isize, @intCast(oh * SH + kh * DH)) - PH;
                        if (0 <= ih and ih < iH) { // assert bounds height
                            const kh_stride = kh * kH_stride;
                            const ih_stride = @as(usize, @intCast(ih)) * iH_stride;
                            for (0..kW) |kw| { // for each kernel width
                                const iw = @as(isize, @intCast(ow * SW + kw * DW)) - PW;
                                if (0 <= iw and iw < iW) { // assert bounds width
                                    const kw_stride = kw * kW_stride;
                                    const iw_stride = @as(usize, @intCast(iw)) * iW_stride;

                                    const iidx = in_stride + ih_stride + iw_stride;
                                    const kidx = km_stride + kh_stride + kw_stride;

                                    // loop unrolled mul
                                    const S = 4;
                                    comptime var ic: usize = 0;
                                    inline while (ic + S <= iC) : (ic += S) {
                                        const inp: *const @Vector(S, f32) = @alignCast(@ptrCast(&inp0[iidx + ic]));
                                        const wgt: *const @Vector(S, f32) = @alignCast(@ptrCast(&inp1[kidx + ic]));
                                        acc += @reduce(.Add, inp.* * wgt.*);
                                    }
                                    inline while (ic < iC) : (ic += 1) {
                                        acc += inp0[iidx + ic] * inp1[kidx + ic];
                                    }
                                }
                            }
                        }
                    }

                    out0[on_stride + oh_stride + ow_stride + oc_stride] = acc;
                }
            }
        }
    }
}

test "NHWC Direct test 1" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 1, 5, 3, 1 },
        .inp1_shape = .{ 1, 2, 3, 1 },
        .out0_shape = .{ 1, 4, 1, 1 },
        .kernel_shape = .{ 2, 3 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [15]f32 align(16) = .{
        0.14880716800689697,
        0.09553954750299454,
        -1.180426001548767,
        0.515553891658783,
        0.4110347628593445,
        1.2884490489959717,
        0.3191468119621277,
        0.732020378112793,
        -0.5462986826896667,
        0.7214465141296387,
        1.302011489868164,
        -0.5265527367591858,
        0.3006894588470459,
        1.0405203104019165,
        0.5142641067504883,
    };

    const wgt: [6]f32 align(16) = .{
        -0.6849071979522705,
        -0.6089025139808655,
        -0.9574037194252014,
        0.09376467019319534,
        -0.11310817301273346,
        -0.5348931550979614,
    };

    const ref: [4]f32 align(16) = .{
        0.28271764516830444,
        -1.5976139307022095,
        0.060740917921066284,
        -1.1473720073699951,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    Conv_Direct_NHWC(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Direct test 2" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 3, 2, 4 },
        .out0_shape = .{ 2, 1, 4, 2 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        0.7056260704994202,
        -0.013999022543430328,
        -0.6544950008392334,
        0.6967948079109192,
        1.3575330972671509,
        0.693719744682312,
        -0.8819823265075684,
        0.16881683468818665,
        2.070680618286133,
        0.6936588883399963,
        -0.4628394544124603,
        0.5601696372032166,
        0.5465888381004333,
        -0.2916150689125061,
        1.4045041799545288,
        -2.0003576278686523,
        -0.3344118893146515,
        0.24749934673309326,
        -0.3134400248527527,
        1.4501193761825562,
        1.228996992111206,
        0.5752865672111511,
        -0.12134894728660583,
        1.1778643131256104,
        0.32547542452812195,
        1.0792583227157593,
        -0.6837954521179199,
        0.43808358907699585,
        0.2326412796974182,
        -1.4736006259918213,
        -0.9807923436164856,
        0.2667204439640045,
        0.8017832040786743,
        0.7129368185997009,
        0.9877210855484009,
        1.2841954231262207,
        0.8613466620445251,
        -0.14824838936328888,
        0.6653398871421814,
        -0.485127329826355,
        -0.3553984761238098,
        -0.7775447964668274,
        -0.4503747820854187,
        0.12213689088821411,
        0.7018536329269409,
        -0.035177841782569885,
        1.2403056621551514,
        -0.27707844972610474,
        1.273091197013855,
        0.4026530086994171,
        0.19394807517528534,
        -0.4448140859603882,
        0.07294221222400665,
        0.33895936608314514,
        -0.14079952239990234,
        -0.2983343005180359,
        -0.8585460782051086,
        -0.25319230556488037,
        -0.6865463256835938,
        -1.6198146343231201,
        -0.5607655644416809,
        -0.7619593739509583,
        0.5510138273239136,
        0.04203517735004425,
        -0.09076264500617981,
        -2.520507574081421,
        -1.019539475440979,
        1.2936877012252808,
        1.9225252866744995,
        0.11221431195735931,
        0.5096692442893982,
        1.2372524738311768,
        -1.7332507371902466,
        1.115020513534546,
        -0.47831451892852783,
        0.48331597447395325,
        0.037091124802827835,
        -1.1467971801757812,
        0.5997166633605957,
        0.5400806069374084,
        -0.009675974026322365,
        -0.3633192777633667,
        -0.8696536421775818,
        -0.3250485062599182,
        1.3116449117660522,
        0.2271602302789688,
        0.26129406690597534,
        0.6618890166282654,
        0.5772472620010376,
        0.15692344307899475,
        -2.552827835083008,
        -0.4085501730442047,
        -1.031540036201477,
        0.290470689535141,
        1.0132249593734741,
        -0.7552207708358765,
        -1.6615445613861084,
        0.25730544328689575,
        0.9270726442337036,
        -0.25089791417121887,
        0.05251386761665344,
        -0.4812523424625397,
        1.4028109312057495,
        0.35851529240608215,
        -0.17390383780002594,
        -0.3361893892288208,
        0.24668177962303162,
        0.36313316226005554,
        -0.5236625671386719,
        0.30027586221694946,
        0.6835519671440125,
        0.6458308100700378,
        -0.5813623666763306,
        -1.452410340309143,
        -1.718828558921814,
        -0.8652077913284302,
        1.1391124725341797,
        0.027726704254746437,
        -1.1874662637710571,
        -0.5606446266174316,
    };

    const wgt: [48]f32 align(16) = .{
        -0.8333306908607483,
        0.13359178602695465,
        0.032465629279613495,
        2.088437557220459,
        0.4482940137386322,
        -0.22046126425266266,
        0.8482038974761963,
        1.497579574584961,
        1.2280325889587402,
        0.454364538192749,
        1.2494101524353027,
        -0.2981218099594116,
        0.9328108429908752,
        -0.11682216078042984,
        -0.7433032989501953,
        1.0878756046295166,
        1.0078620910644531,
        1.6055649518966675,
        0.4094926714897156,
        -1.2764207124710083,
        0.3440566658973694,
        -0.03500814363360405,
        0.4325251281261444,
        1.4457716941833496,
        -1.2441496849060059,
        -0.08918468654155731,
        1.2601041793823242,
        -1.653920292854309,
        0.18806086480617523,
        -0.16204886138439178,
        1.3309770822525024,
        0.05322990566492081,
        0.07300521433353424,
        -1.14058518409729,
        -0.767168402671814,
        1.7949203252792358,
        -0.31096115708351135,
        -0.8133240938186646,
        -0.8223347067832947,
        -0.9810754060745239,
        0.49424681067466736,
        0.020760761573910713,
        0.19879691302776337,
        -2.0390241146087646,
        -0.5904168486595154,
        -0.2695523202419281,
        1.833328127861023,
        1.1834278106689453,
    };

    const ref: [16]f32 align(16) = .{
        1.666340708732605,
        -2.070803642272949,
        3.197631359100342,
        -1.5492483377456665,
        -0.23661883175373077,
        -1.3697454929351807,
        -2.951359748840332,
        2.5783865451812744,
        2.5957064628601074,
        0.17336800694465637,
        9.307361602783203,
        2.479504108428955,
        -7.283417701721191,
        -8.716911315917969,
        -1.462164044380188,
        -3.48917293548584,
    };

    var out: [16]f32 align(16) = .{0} ** 16;
    Conv_Direct_NHWC(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Direct test 3" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 3, 2, 4 },
        .out0_shape = .{ 2, 1, 1, 2 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 3, 4 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        2.085988759994507,
        -0.7238004207611084,
        0.6817858815193176,
        -1.1230146884918213,
        -0.3417833149433136,
        -2.1843042373657227,
        -1.1836107969284058,
        2.113588809967041,
        0.32257676124572754,
        -0.3527223467826843,
        -0.037241142243146896,
        -0.2609887421131134,
        0.2951962947845459,
        -1.3525527715682983,
        0.1948680877685547,
        1.059416651725769,
        -0.5932687520980835,
        -0.8837451934814453,
        -0.06394120305776596,
        -0.891825258731842,
        -0.7619132399559021,
        1.514011263847351,
        0.049470074474811554,
        -0.13522933423519135,
        1.5571867227554321,
        2.1394026279449463,
        1.6372848749160767,
        0.10328694432973862,
        0.35059183835983276,
        1.7543835639953613,
        0.05979841202497482,
        -0.8611331582069397,
        0.4015767574310303,
        0.30494973063468933,
        0.08152851462364197,
        -0.07931055873632431,
        -0.12980739772319794,
        -0.20259185135364532,
        -0.14483553171157837,
        1.605118989944458,
        -0.8984407186508179,
        0.8019330501556396,
        -0.4638354778289795,
        0.6907367706298828,
        2.6236164569854736,
        1.2413479089736938,
        0.11392191052436829,
        -1.0297209024429321,
        1.2129489183425903,
        0.705400824546814,
        1.4054900407791138,
        -0.9714334011077881,
        -1.1778415441513062,
        0.03022666834294796,
        1.2723559141159058,
        -0.4352151155471802,
        -0.28469952940940857,
        0.17142298817634583,
        -2.1769020557403564,
        -0.7005059719085693,
        -0.47767648100852966,
        -1.3293368816375732,
        -0.15051941573619843,
        -1.9146941900253296,
        1.287848711013794,
        1.8783806562423706,
        0.02687859535217285,
        -1.4595377445220947,
        -0.7804450392723083,
        -0.7103472352027893,
        0.7246019244194031,
        -0.2799488306045532,
        -2.2904911041259766,
        -0.7349205613136292,
        0.5180321335792542,
        -0.09936612099409103,
        -1.066694736480713,
        -0.02821919322013855,
        2.218346118927002,
        0.2307651937007904,
        1.900501012802124,
        -1.5394413471221924,
        -0.030066287145018578,
        1.1825059652328491,
        1.9890930652618408,
        0.19541393220424652,
        0.2764708399772644,
        -0.6330727934837341,
        0.4137313663959503,
        0.868833065032959,
        -0.8990737199783325,
        -0.6360567808151245,
        0.10085772722959518,
        0.8918776512145996,
        -0.0258083064109087,
        1.371485710144043,
        -0.1306486874818802,
        -1.3035129308700562,
        0.6338004469871521,
        1.7303746938705444,
        -0.5331866145133972,
        -0.9618386626243591,
        0.18070973455905914,
        0.9532103538513184,
        -1.4931646585464478,
        0.9030920267105103,
        0.8123594522476196,
        -0.3147605061531067,
        1.097474217414856,
        -0.36680999398231506,
        0.3775976598262787,
        0.808478593826294,
        0.9022952914237976,
        0.5887507796287537,
        0.10790089517831802,
        2.1151788234710693,
        0.023949146270751953,
        -1.260208010673523,
        1.9681880474090576,
        -0.3573332130908966,
    };

    const wgt: [48]f32 align(16) = .{
        -0.036107730120420456,
        1.5569614171981812,
        -0.3286377489566803,
        -0.5580061674118042,
        -0.6063362956047058,
        1.475296139717102,
        0.9926338195800781,
        -1.2013061046600342,
        1.9843573570251465,
        -0.8500750064849854,
        0.40773171186447144,
        0.035345397889614105,
        -1.1877565383911133,
        -2.4804041385650635,
        -0.32074296474456787,
        2.7773561477661133,
        -1.3309745788574219,
        -0.2445918768644333,
        -0.38096484541893005,
        -0.14504997432231903,
        -0.7361732721328735,
        -0.36224985122680664,
        1.8015673160552979,
        1.174094796180725,
        -0.26151734590530396,
        0.880177915096283,
        1.1531425714492798,
        0.30759871006011963,
        -0.675784707069397,
        0.5083079934120178,
        1.0920147895812988,
        0.05697903409600258,
        0.6449652910232544,
        -0.5258405804634094,
        -0.040993183851242065,
        -2.281796455383301,
        -1.2613250017166138,
        0.5799947381019592,
        0.18642112612724304,
        -1.3849565982818604,
        0.996334969997406,
        -1.0377763509750366,
        1.5647321939468384,
        0.8031786680221558,
        0.3406388759613037,
        -0.8310757279396057,
        0.7012915015220642,
        -1.3940415382385254,
    };

    const ref: [4]f32 align(16) = .{
        -20.01554298400879,
        -4.856302261352539,
        5.854825496673584,
        -2.641343593597412,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    Conv_Direct_NHWC(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Direct test 4" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 2, 2, 4 },
        .out0_shape = .{ 2, 2, 4, 2 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 1 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        0.355393648147583,
        -0.47914260625839233,
        1.4866032600402832,
        1.6372807025909424,
        0.6873674988746643,
        0.9317585229873657,
        0.46320590376853943,
        0.6312335729598999,
        0.7308387160301208,
        -0.8231823444366455,
        0.31503182649612427,
        -0.3323918879032135,
        0.02007204107940197,
        0.36133500933647156,
        -0.7117472887039185,
        1.9066888093948364,
        0.8887764811515808,
        0.2570027709007263,
        -1.1493186950683594,
        0.5027382373809814,
        0.5978381037712097,
        -0.07505438476800919,
        1.3348695039749146,
        1.251466155052185,
        -1.370954155921936,
        -1.032044768333435,
        0.2650037705898285,
        0.258622407913208,
        -0.3740386664867401,
        -0.4341277480125427,
        1.2476156949996948,
        0.3693651556968689,
        0.8073245286941528,
        -0.5038594603538513,
        0.6835002899169922,
        -1.4423025846481323,
        -0.38039541244506836,
        0.14444725215435028,
        -0.11148086935281754,
        -1.7436504364013672,
        0.43421775102615356,
        0.4320550560951233,
        -0.6745447516441345,
        0.486750066280365,
        -0.9409492015838623,
        -1.080517292022705,
        0.33882203698158264,
        -1.3136601448059082,
        0.2897948622703552,
        -1.1573984622955322,
        0.3483583927154541,
        -0.0976996123790741,
        0.5971368551254272,
        -1.0417413711547852,
        0.24593600630760193,
        0.877685010433197,
        -1.931291937828064,
        0.45032602548599243,
        -1.2906244993209839,
        -0.5138921737670898,
        0.16498646140098572,
        0.6085731983184814,
        0.23016731441020966,
        -2.0866775512695312,
        -1.7105607986450195,
        0.7725213766098022,
        1.5062642097473145,
        0.8704478740692139,
        1.1368186473846436,
        0.3505726158618927,
        -0.0586630143225193,
        0.5560656189918518,
        -1.9868905544281006,
        0.533324122428894,
        -0.07362230122089386,
        -0.9639331698417664,
        -0.6932376623153687,
        -0.2326362133026123,
        0.16034647822380066,
        -0.24679377675056458,
        0.5456809997558594,
        0.1370614469051361,
        0.01662810705602169,
        0.3043026328086853,
        -1.8468987941741943,
        -0.43803632259368896,
        -1.4057704210281372,
        0.3611880838871002,
        0.6720439791679382,
        -0.5355690717697144,
        -1.8810979127883911,
        -0.23446837067604065,
        1.6600773334503174,
        -0.3367619812488556,
        -1.943261981010437,
        -1.5985229015350342,
        1.2538905143737793,
        -0.5544382929801941,
        -0.03433647006750107,
        -0.15526078641414642,
        0.6901616454124451,
        -1.3708378076553345,
        -0.24268484115600586,
        -0.019641565158963203,
        1.4902325868606567,
        1.0761168003082275,
        -1.663260579109192,
        0.4403499364852905,
        1.612053632736206,
        1.079707145690918,
        0.17788836359977722,
        -2.77461314201355,
        -0.465670645236969,
        0.1554499715566635,
        -0.03204387053847313,
        -1.1355149745941162,
        1.485422968864441,
        -0.4512384235858917,
        0.03222408518195152,
        -1.0211256742477417,
    };

    const wgt: [32]f32 align(16) = .{
        0.3395003080368042,
        -0.1807621270418167,
        1.2267303466796875,
        0.504814624786377,
        -1.454304575920105,
        0.49322083592414856,
        -0.9329791069030762,
        -0.08865293115377426,
        1.247528314590454,
        0.7247027158737183,
        0.7209284901618958,
        1.4652520418167114,
        -0.9986302256584167,
        0.2344019114971161,
        -0.9889556765556335,
        -0.2245928943157196,
        -0.23116829991340637,
        0.5186995267868042,
        -0.13649490475654602,
        0.5465813279151917,
        0.15355893969535828,
        -0.2752457857131958,
        -0.09926282614469528,
        1.1521028280258179,
        -0.4487905204296112,
        0.23500825464725494,
        0.23150339722633362,
        -0.6242227554321289,
        0.4669198989868164,
        -1.6748003959655762,
        1.214035153388977,
        0.49678558111190796,
    };

    const ref: [32]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [32]f32 align(16) = .{0} ** 32;
    Conv_Direct_NHWC(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Direct test 5" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 2, 2, 4 },
        .out0_shape = .{ 2, 1, 3, 2 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 2 },
        .pads = .{ 1, 1, 1, 1 },
    };

    const inp: [120]f32 align(16) = .{
        -1.7268195152282715,
        -0.08867072314023972,
        -0.5390854477882385,
        0.508762538433075,
        2.4153177738189697,
        -0.737494170665741,
        -1.4309568405151367,
        2.5551764965057373,
        0.9394053816795349,
        -0.3561049699783325,
        -0.6613278388977051,
        -0.20680683851242065,
        -0.11471939831972122,
        1.2953623533248901,
        -0.7374194264411926,
        0.7673794031143188,
        -2.2656304836273193,
        0.7818636894226074,
        0.608882486820221,
        0.34227699041366577,
        -0.9767817854881287,
        -0.22199493646621704,
        0.4004564583301544,
        -1.0555944442749023,
        0.8687446117401123,
        0.01567136123776436,
        0.3711215853691101,
        -0.6387571692466736,
        0.7548587322235107,
        0.3223890960216522,
        -0.12351169437170029,
        0.5940092206001282,
        -0.7634258270263672,
        1.084633231163025,
        -1.9600956439971924,
        -2.1653892993927,
        0.5447317957878113,
        -0.12794499099254608,
        -0.07553485035896301,
        -1.913672924041748,
        -1.4073201417922974,
        -1.4195786714553833,
        0.7449773550033569,
        -0.14514674246311188,
        -0.19870491325855255,
        -0.3565548062324524,
        -0.10513591766357422,
        0.5164214968681335,
        2.0824456214904785,
        0.29514291882514954,
        0.5721882581710815,
        1.16605806350708,
        0.3180702328681946,
        1.0033636093139648,
        -0.9748156070709229,
        -0.02427498996257782,
        1.0069212913513184,
        -0.4136801064014435,
        -0.5237379670143127,
        -1.1282024383544922,
        -0.4430590271949768,
        1.1864274740219116,
        1.1387501955032349,
        1.6956788301467896,
        -0.3141224980354309,
        -1.1516832113265991,
        -1.5676987171173096,
        -0.5326947569847107,
        -0.9544989466667175,
        -1.991932988166809,
        -0.1183440312743187,
        -1.1032143831253052,
        -1.2547214031219482,
        -0.31411024928092957,
        -0.3160788416862488,
        -0.22115962207317352,
        -0.8989275693893433,
        0.21425078809261322,
        -0.14848573505878448,
        -0.22914718091487885,
        0.5484145283699036,
        1.5309582948684692,
        1.7259223461151123,
        -1.9988003969192505,
        0.6676146984100342,
        0.44035467505455017,
        0.2877267599105835,
        -0.2218034565448761,
        -0.41023820638656616,
        -1.5525603294372559,
        1.2121458053588867,
        1.6848894357681274,
        0.6648849844932556,
        -0.8344091176986694,
        0.37615111470222473,
        0.5321930646896362,
        0.6770490407943726,
        0.04836779460310936,
        1.996595025062561,
        0.20002153515815735,
        -0.43509653210639954,
        -0.2391808032989502,
        2.1321725845336914,
        -0.5045555830001831,
        -0.24235261976718903,
        -1.0994889736175537,
        -1.5179879665374756,
        -2.0442492961883545,
        -1.3748085498809814,
        -0.9277268052101135,
        0.22310657799243927,
        -0.28490301966667175,
        -0.302315354347229,
        0.43415188789367676,
        -0.6340090036392212,
        1.5166648626327515,
        0.6839439272880554,
        1.7820698022842407,
        0.9500387907028198,
        1.6508716344833374,
    };

    const wgt: [32]f32 align(16) = .{
        -0.7005094885826111,
        -0.6223763227462769,
        -1.7329761981964111,
        0.1013290137052536,
        0.6328955292701721,
        -0.029804768040776253,
        1.030982494354248,
        0.27128079533576965,
        -0.2561946511268616,
        0.8083592653274536,
        2.1991636753082275,
        2.018885850906372,
        -0.4832088351249695,
        -0.6513434052467346,
        -0.3881221115589142,
        -1.4637205600738525,
        0.15208017826080322,
        1.0718083381652832,
        0.058562930673360825,
        -1.3066641092300415,
        1.2879741191864014,
        0.8498442769050598,
        0.25445595383644104,
        -0.19282521307468414,
        1.8463391065597534,
        -0.4339934289455414,
        1.8771872520446777,
        1.4659004211425781,
        -1.3658785820007324,
        -2.141948699951172,
        -1.7020083665847778,
        -2.335209608078003,
    };

    const ref: [12]f32 align(16) = .{
        -3.8714194297790527,
        -5.250728130340576,
        -0.8285630941390991,
        2.684218406677246,
        1.004054069519043,
        -1.0333621501922607,
        2.290102958679199,
        6.808089733123779,
        -4.1162943840026855,
        -0.36286720633506775,
        -1.074066162109375,
        -3.0978565216064453,
    };

    var out: [12]f32 align(16) = .{0} ** 12;
    Conv_Direct_NHWC(cfg, &inp, &wgt, &out);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}
