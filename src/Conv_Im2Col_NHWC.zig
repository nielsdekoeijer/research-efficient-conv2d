const std = @import("std");
const testing = std.testing;
const GetStride = @import("util.zig").GetStride;
const ConvConfig = @import("ConvConfig.zig").ConvConfig;
const ConvLayout = @import("ConvConfig.zig").ConvLayout;
const ComputeScratchSize = @import("ConvConfig.zig").ComputeScratchSize;
const ConvBackend = @import("ConvConfig.zig").ConvBackend;
const blas = @cImport({
    @cInclude("cblas.h");
});

pub noinline fn Conv_Im2Col_NHWC(
    comptime config: anytype,
    noalias inp0: []align(config.A) const config.T,
    noalias inp1: []align(config.A) const config.T,
    noalias out0: []align(config.A) config.T,
    noalias scr0: []align(config.A) config.T,
) void {
    // read inp shape (N, H, W, C)
    const iN = config.inp0_shape[0]; // batch size
    const iN_stride = comptime GetStride(config.inp0_shape, 0);
    const iH = config.inp0_shape[1]; // input height
    const iH_stride = comptime GetStride(config.inp0_shape, 1);
    const iW = config.inp0_shape[2]; // input width
    const iW_stride = comptime GetStride(config.inp0_shape, 2);
    const iC = config.inp0_shape[3]; // input channels
    const iC_stride = comptime GetStride(config.inp0_shape, 3);

    // not required in this impl
    _ = iC_stride;

    // read wgt shape (M, H, W, C)
    const kM = config.inp1_shape[0]; // output channels
    const kM_stride = comptime GetStride(config.inp1_shape, 0);
    const kH = config.inp1_shape[1]; // kernel height
    const kH_stride = comptime GetStride(config.inp1_shape, 1);
    const kW = config.inp1_shape[2]; // kernel width
    const kW_stride = comptime GetStride(config.inp1_shape, 2);
    const kC = config.inp1_shape[3]; // input channels
    const kC_stride = comptime GetStride(config.inp1_shape, 3);

    // not required in this impl
    _ = kM_stride;
    _ = kH_stride;
    _ = kW_stride;
    _ = kC_stride;

    // read out shape (N, H, W, C)
    const oN = config.out0_shape[0]; // batch size
    const oN_stride = comptime GetStride(config.out0_shape, 0);
    const oH = config.out0_shape[1]; // output height
    const oH_stride = comptime GetStride(config.out0_shape, 1);
    const oW = config.out0_shape[2]; // output width
    const oW_stride = comptime GetStride(config.out0_shape, 2);
    const oC = config.out0_shape[3]; // output channels
    const oC_stride = comptime GetStride(config.out0_shape, 3);

    // not required in this impl
    _ = oC_stride;
    _ = oH_stride;
    _ = oW_stride;

    // Impl for NHWC input layout
    // We want to do: C = A x B
    // A = (oH x oW, kH x kW x iC)
    // B = (kH x kW x kC == iC, kM)
    // C = A @ B --> (oH x oW, kM)
    // Note that weights are given (kM, kH, kW, kC == iC) --> B = transpose weights

    const M = oH * oW;
    const N = kH * kW * iC;
    const K = kM;

    const A_oH_stride = GetStride(.{ oH, oW, kH, kW, iC }, 0);
    const A_oW_stride = GetStride(.{ oH, oW, kH, kW, iC }, 1);
    const A_kH_stride = GetStride(.{ oH, oW, kH, kW, iC }, 2);
    const A_kW_stride = GetStride(.{ oH, oW, kH, kW, iC }, 3);

    // sanitize impl
    if (comptime iC != kC) {
        @compileError("Input channel count does not match weight input channel count");
    }

    if (comptime kM != oC) {
        @compileError("Output channel count does not match weight output channel count");
    }

    if (comptime iN != oN) {
        @compileError("Input batch size does not match output batch size");
    }

    const inp1_len = config.inp1_shape[0] * config.inp1_shape[1] * //
        config.inp1_shape[2] * config.inp1_shape[3];
    if (inp1_len != K * N) {
        @compileError(
            std.fmt.comptimePrint(
                "inp1 misdimensioned: {} x {} != {}",
                .{ K, N, inp1_len },
            ),
        );
    }

    const out0_len = config.out0_shape[0] * config.out0_shape[1] * //
        config.out0_shape[2] * config.out0_shape[3];
    if (out0_len != oN * M * K) {
        @compileError(
            std.fmt.comptimePrint(
                "out0 misdimensioned: {} x {} != {}",
                .{ M, K, out0_len },
            ),
        );
    }

    const scr0_len = comptime ComputeScratchSize(config);
    if (scr0_len != M * N) {
        @compileError(
            std.fmt.comptimePrint(
                "scr0 misdimensioned: {} x {} != {}",
                .{ M, K, scr0_len },
            ),
        );
    }

    // stride
    const SH = config.strides[0];
    const SW = config.strides[1];

    // dilation
    const DH = config.dilations[0];
    const DW = config.dilations[1];

    // padding
    const PH: isize = @intCast(config.pads[0]);
    const PW: isize = @intCast(config.pads[2]);

    for (0..iN) |n| {
        const in_stride = n * iN_stride;
        const on_stride = n * oN_stride;

        for (0..oH) |oh| { // for each output height
            const A_oh_stride = oh * A_oH_stride;
            for (0..oW) |ow| { // for each output width
                const A_ow_stride = ow * A_oW_stride;
                // const row_off = (oh * oW + ow) * K;
                for (0..kH) |kh| { // for each kernel height
                    const A_kh_stride = kh * A_kH_stride;
                    const ih = @as(isize, @intCast(oh * SH + kh * DH)) - PH;
                    if (0 <= ih and ih < iH) { // assert bounds height
                        const ih_stride = @as(usize, @intCast(ih)) * iH_stride;
                        for (0..kW) |kw| { // for each kernel width
                            const A_kw_stride = kw * A_kW_stride;
                            const iw = @as(isize, @intCast(ow * SW + kw * DW)) - PW;
                            if (0 <= iw and iw < iW) { // assert bounds width
                                const iw_stride = @as(usize, @intCast(iw)) * iW_stride;
                                const src = in_stride + ih_stride + iw_stride;

                                // const base_col = ((kh * kW) + kw) * iC;
                                // const dst = row_off + base_col;
                                const dst = A_oh_stride + A_ow_stride + A_kh_stride + //
                                    A_kw_stride;

                                @memcpy(scr0[dst .. dst + iC], inp0[src .. src + iC]);
                            }
                        }
                    }
                }
            }
        }

        blas.cblas_sgemm(
            blas.CblasRowMajor,
            blas.CblasNoTrans,
            blas.CblasTrans,
            M,
            K,
            N,
            1.0,
            &scr0[0],
            N,
            &inp1[0],
            N,
            0.0,
            &out0[on_stride],
            K,
        );
    }
}

test "NHWC Im2Col test 1" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 1, 5, 3, 1 },
        .inp1_shape = .{ 1, 2, 3, 1 },
        .out0_shape = .{ 1, 4, 1, 1 },
        .kernel_shape = .{ 2, 3 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [15]f32 align(16) = .{
        -0.07314448803663254,
        -0.12264885753393173,
        0.6160747408866882,
        0.8827842473983765,
        0.011789496056735516,
        -0.400888055562973,
        0.4728492796421051,
        1.4810870885849,
        -0.43501484394073486,
        -0.9356321096420288,
        -0.273174524307251,
        -1.1321407556533813,
        -0.835868239402771,
        0.8372012972831726,
        1.135725736618042,
    };

    const wgt: [6]f32 align(16) = .{
        -0.5275726914405823,
        -0.9387843608856201,
        1.2933008670806885,
        0.7128668427467346,
        0.16104894876480103,
        1.3652318716049194,
    };

    const ref: [4]f32 align(16) = .{
        1.0344010591506958,
        -1.0135595798492432,
        -4.459099292755127,
        0.3753637969493866,
    };

    var out: [4]f32 align(16) = .{0} ** 4;

    var scr: [ComputeScratchSize(cfg)]f32 align(16) = .{0} ** ComputeScratchSize(cfg);

    Conv_Im2Col_NHWC(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Im2Col test 2" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 3, 2, 4 },
        .out0_shape = .{ 2, 1, 4, 2 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 1, 1 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -0.3865022361278534,
        -0.17390406131744385,
        -0.31514158844947815,
        -0.4991125762462616,
        -1.5236337184906006,
        -0.7815409302711487,
        1.4713653326034546,
        -0.11787733435630798,
        0.7508224248886108,
        -1.6105096340179443,
        0.07517562061548233,
        -0.32761305570602417,
        -0.9654332995414734,
        -0.5311862230300903,
        0.3808169364929199,
        0.007121512200683355,
        -0.19188764691352844,
        -0.1518319845199585,
        0.29343917965888977,
        1.0922696590423584,
        -1.7064052820205688,
        0.358659029006958,
        -0.002147507155314088,
        -0.14740154147148132,
        0.5881178975105286,
        -0.08312191069126129,
        -0.5973900556564331,
        0.866168200969696,
        -1.8050744533538818,
        0.2511139214038849,
        -0.9565457105636597,
        -0.6881208419799805,
        0.5070328116416931,
        0.7996124625205994,
        -1.3919222354888916,
        -1.487119436264038,
        1.0222245454788208,
        0.11919064819812775,
        0.5549140572547913,
        -0.4300052523612976,
        1.678096055984497,
        -0.1108444482088089,
        0.6375568509101868,
        -0.6192899942398071,
        -1.9997220039367676,
        1.2762993574142456,
        0.4125681221485138,
        0.06764274090528488,
        1.1276042461395264,
        1.3491857051849365,
        0.7354122996330261,
        -1.0571781396865845,
        -0.9561673998832703,
        -0.08193299174308777,
        0.056424085050821304,
        1.4844684600830078,
        0.4606774151325226,
        -1.0042780637741089,
        -0.28284528851509094,
        -0.29093125462532043,
        2.2364015579223633,
        0.13108234107494354,
        0.5629423260688782,
        0.5768656730651855,
        1.2138097286224365,
        -1.4675496816635132,
        -0.10701404511928558,
        0.7447414398193359,
        2.648859739303589,
        0.12369518727064133,
        -0.6333054900169373,
        2.7643446922302246,
        -0.19049778580665588,
        1.047764778137207,
        1.5227030515670776,
        1.0375515222549438,
        0.09269141405820847,
        0.9329684972763062,
        -0.3733152449131012,
        1.0229970216751099,
        -0.3702338933944702,
        -1.383991003036499,
        -1.2307442426681519,
        0.90343177318573,
        -0.40769898891448975,
        -0.9386177659034729,
        0.9604320526123047,
        -1.3567793369293213,
        -0.7981826066970825,
        -0.27408429980278015,
        -1.1331475973129272,
        0.02028643898665905,
        -0.3579559326171875,
        -1.3628932237625122,
        -1.0014508962631226,
        -2.00325608253479,
        -0.8422882556915283,
        -0.1884491741657257,
        -1.1987515687942505,
        -0.360254168510437,
        0.5013696551322937,
        -0.07317544519901276,
        1.1542540788650513,
        0.6814239025115967,
        2.257467031478882,
        -0.030105536803603172,
        0.332214891910553,
        1.7463239431381226,
        0.6790587306022644,
        -0.040421899408102036,
        -1.6341266632080078,
        -1.3062330484390259,
        -1.5583293437957764,
        -1.2304744720458984,
        -1.364883303642273,
        1.0826929610630032e-05,
        0.27468395233154297,
        -1.2382242679595947,
        0.8296834826469421,
        0.3616103231906891,
    };

    const wgt: [48]f32 align(16) = .{
        0.42022013664245605,
        -1.6348296403884888,
        -1.5424607992172241,
        0.21910767257213593,
        -0.8815239071846008,
        0.03696245327591896,
        -0.7127768993377686,
        0.30210989713668823,
        -0.3369605839252472,
        0.6937910914421082,
        0.9902468323707581,
        -1.8534116744995117,
        -1.1273196935653687,
        -0.6659440994262695,
        -1.4885510206222534,
        -0.0416935570538044,
        -0.4816269874572754,
        0.2659640908241272,
        2.2711830139160156,
        -1.6401292085647583,
        1.3607592582702637,
        -0.19157379865646362,
        -0.08591484278440475,
        -1.5587977170944214,
        0.04029252007603645,
        -0.45662522315979004,
        0.47956711053848267,
        -0.8909377455711365,
        0.2845389246940613,
        -0.8316492438316345,
        0.37453505396842957,
        -0.54277104139328,
        0.005994308274239302,
        -1.2164427042007446,
        -0.9153395295143127,
        -1.444157361984253,
        -1.3834397792816162,
        0.17775623500347137,
        -1.369970679283142,
        1.9591543674468994,
        -2.3341190814971924,
        0.4276054799556732,
        1.9194777011871338,
        0.3991829752922058,
        -0.5025575160980225,
        0.6068528294563293,
        1.500510811805725,
        -1.513460636138916,
    };

    const ref: [16]f32 align(16) = .{
        0.5883650779724121,
        1.952640175819397,
        3.324890613555908,
        13.75765609741211,
        5.078958511352539,
        -1.4101313352584839,
        -0.6875635981559753,
        1.497656226158142,
        -3.2865474224090576,
        -3.1769604682922363,
        7.817116737365723,
        -1.0035037994384766,
        0.058312930166721344,
        -11.869978904724121,
        -1.3163580894470215,
        5.708281993865967,
    };

    var out: [16]f32 align(16) = .{0} ** 16;
    var scr: [96]f32 align(16) = .{0} ** 96;
    Conv_Im2Col_NHWC(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Im2Col test 3" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 3, 2, 4 },
        .out0_shape = .{ 2, 1, 1, 2 },
        .kernel_shape = .{ 3, 2 },
        .strides = .{ 3, 4 },
        .dilations = .{ 1, 1 },
        .pads = .{ 0, 0, 0, 0 },
    };

    const inp: [120]f32 align(16) = .{
        -1.824957251548767,
        1.222662091255188,
        -0.33970406651496887,
        -0.24973975121974945,
        0.8194090723991394,
        1.5370125770568848,
        -0.13805799186229706,
        0.41627582907676697,
        0.6663330793380737,
        2.1790521144866943,
        0.36828720569610596,
        0.9587010145187378,
        0.3305962383747101,
        1.9339393377304077,
        -1.895356297492981,
        1.2504048347473145,
        0.30079108476638794,
        0.1578255295753479,
        -0.8375640511512756,
        1.0542888641357422,
        -0.27056849002838135,
        0.34418559074401855,
        0.05124728009104729,
        0.20497578382492065,
        -1.9510116577148438,
        -1.652747631072998,
        1.165509581565857,
        1.0502549409866333,
        0.15484316647052765,
        -2.5120346546173096,
        0.04804832860827446,
        -0.2751559317111969,
        -0.46037325263023376,
        0.11713580042123795,
        -2.0980403423309326,
        -0.30929163098335266,
        0.699859082698822,
        0.4014436602592468,
        1.7514315843582153,
        0.023558786138892174,
        0.4815414845943451,
        0.22912557423114777,
        -0.593409538269043,
        0.908772885799408,
        -0.8892697691917419,
        -0.6342526078224182,
        1.3577510118484497,
        0.32364001870155334,
        -2.6847686767578125,
        1.3495488166809082,
        0.0905328243970871,
        0.33983224630355835,
        0.041334088891744614,
        0.03584381565451622,
        -0.5341644883155823,
        0.6239938735961914,
        0.533334493637085,
        1.1712478399276733,
        -1.9339981079101562,
        1.1270719766616821,
        1.4034446477890015,
        0.019719189032912254,
        -0.2893286347389221,
        -0.18642108142375946,
        -1.465658187866211,
        0.15688294172286987,
        -0.05010460317134857,
        1.0198560953140259,
        0.3908439576625824,
        -0.3611152172088623,
        0.977089524269104,
        -0.330773264169693,
        0.988162100315094,
        -1.0132482051849365,
        0.34624141454696655,
        -1.4816887378692627,
        1.1616008281707764,
        -1.6053314208984375,
        -0.1592753827571869,
        -0.7235456109046936,
        -0.16033585369586945,
        0.5848211050033569,
        -0.9229730367660522,
        1.4593220949172974,
        0.31880703568458557,
        0.1523236632347107,
        1.2381880283355713,
        0.8690623044967651,
        -0.7383727431297302,
        0.38472867012023926,
        -0.9957602024078369,
        -0.06534517556428909,
        -0.7012507319450378,
        0.8917569518089294,
        -0.5589699149131775,
        -1.5803700685501099,
        -0.6800744533538818,
        0.0027868207544088364,
        -1.8114897012710571,
        1.5878007411956787,
        0.6652805209159851,
        0.429333359003067,
        -2.1546332836151123,
        0.9580321311950684,
        -0.8020261526107788,
        0.020139921456575394,
        2.3305463790893555,
        1.832255482673645,
        -0.5932493805885315,
        -1.5484836101531982,
        -0.7452780604362488,
        1.1872769594192505,
        -0.3142549991607666,
        -0.2690005302429199,
        -0.44986972212791443,
        1.2667019367218018,
        -0.3797358274459839,
        1.2631109952926636,
        -1.1191539764404297,
        0.4551941454410553,
    };

    const wgt: [48]f32 align(16) = .{
        0.4111895263195038,
        0.18675221502780914,
        -0.7905009388923645,
        -0.45711421966552734,
        0.6258590817451477,
        1.4289671182632446,
        -0.07683900743722916,
        -0.37109026312828064,
        0.12547098100185394,
        1.2188823223114014,
        -1.705603837966919,
        0.08170578628778458,
        -0.4088023006916046,
        -1.0380216836929321,
        -0.1398295909166336,
        -1.6167734861373901,
        -2.4052188396453857,
        -0.28924739360809326,
        0.45359566807746887,
        -0.281477689743042,
        -1.5427488088607788,
        0.2942304313182831,
        0.9883810877799988,
        -0.06297950446605682,
        -0.17120054364204407,
        -0.581314206123352,
        0.07165565341711044,
        0.2656721770763397,
        -0.36162516474723816,
        -1.8710360527038574,
        -0.9647402763366699,
        -2.2477951049804688,
        0.5043322443962097,
        -1.179179310798645,
        0.039076149463653564,
        1.6126691102981567,
        -2.147160530090332,
        -1.2291899919509888,
        -0.09970515221357346,
        -0.35680779814720154,
        0.3564687669277191,
        -1.2298561334609985,
        0.2511206269264221,
        -1.7790387868881226,
        1.4251528978347778,
        2.1925129890441895,
        -1.600839376449585,
        1.6585065126419067,
    };

    const ref: [4]f32 align(16) = .{
        4.150459289550781,
        -5.1142988204956055,
        0.8064847588539124,
        -6.415228843688965,
    };

    var out: [4]f32 align(16) = .{0} ** 4;
    var scr: [24]f32 align(16) = .{0} ** 24;
    Conv_Im2Col_NHWC(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Im2Col test 4" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 2, 2, 4 },
        .out0_shape = .{ 2, 2, 4, 2 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 1 },
        .pads = .{ 3, 3, 2, 2 },
    };

    const inp: [120]f32 align(16) = .{
        -0.3287828862667084,
        1.3210606575012207,
        1.3846920728683472,
        -0.32262662053108215,
        -0.7352452278137207,
        -0.0625016987323761,
        -1.579622507095337,
        1.1432956457138062,
        -1.1781859397888184,
        -0.35694605112075806,
        0.8876007199287415,
        -0.6044718027114868,
        0.16920392215251923,
        -0.3521258533000946,
        -1.04298996925354,
        -1.8151869773864746,
        0.6095413565635681,
        -0.9842389822006226,
        -0.9583110809326172,
        0.25809207558631897,
        -0.10345879942178726,
        1.0193266868591309,
        1.7547528743743896,
        -2.1113359928131104,
        -0.25047439336776733,
        1.4439436197280884,
        0.30218732357025146,
        0.03723979368805885,
        0.630897045135498,
        2.180042028427124,
        -0.24940502643585205,
        -0.1783009022474289,
        0.17718815803527832,
        2.1295828819274902,
        1.404841661453247,
        0.8092581629753113,
        -0.08517207205295563,
        -0.6637424230575562,
        -1.5208747386932373,
        0.3959258198738098,
        1.618562936782837,
        -0.256188303232193,
        -0.02220812253654003,
        -0.8271482586860657,
        0.48880138993263245,
        -1.8140718936920166,
        0.32653728127479553,
        -0.8638312220573425,
        -0.34186413884162903,
        0.7544833421707153,
        1.0842891931533813,
        -0.7461632490158081,
        -0.6741694808006287,
        -1.3807419538497925,
        -1.8238825798034668,
        1.1594849824905396,
        -0.5044006109237671,
        -0.7895548939704895,
        -0.21347713470458984,
        -0.6679972410202026,
        -0.5974705219268799,
        -1.2340012788772583,
        0.3847239017486572,
        1.5668137073516846,
        -0.3342747390270233,
        -0.3187726140022278,
        -1.6850563287734985,
        1.776226282119751,
        -0.5414199233055115,
        -0.9043875932693481,
        2.413378953933716,
        -1.6046154499053955,
        -1.4778993129730225,
        0.11922279745340347,
        0.11801999062299728,
        0.9245659708976746,
        -1.2468630075454712,
        0.3378906548023224,
        1.6241276264190674,
        -0.4898158609867096,
        -1.3683980703353882,
        -1.8187847137451172,
        0.3514776825904846,
        0.14794227480888367,
        -0.2712525427341461,
        2.0848782062530518,
        0.7787431478500366,
        0.4233516752719879,
        1.086584448814392,
        -1.5155298709869385,
        -1.523618221282959,
        -0.2905450761318207,
        -2.237279176712036,
        -1.2625879049301147,
        0.5820674300193787,
        -1.1829798221588135,
        0.40139758586883545,
        0.3958459794521332,
        -0.9034136533737183,
        1.0998696088790894,
        -0.6835547089576721,
        0.3367522656917572,
        -1.2642816305160522,
        -0.6009747385978699,
        -0.5331003069877625,
        1.0830371379852295,
        -1.4969149827957153,
        -1.9324970245361328,
        -0.5541113018989563,
        -1.385623812675476,
        0.06049041077494621,
        -0.7787801027297974,
        1.1865657567977905,
        -1.1213322877883911,
        -1.929556131362915,
        0.41022536158561707,
        -0.8866850733757019,
        -0.36761674284935,
        0.31669339537620544,
        -0.0007296860567294061,
    };

    const wgt: [32]f32 align(16) = .{
        -1.5458555221557617,
        0.15352694690227509,
        -0.4144039750099182,
        0.7778641581535339,
        0.12690073251724243,
        -0.3535573184490204,
        -0.12959986925125122,
        -0.5383701920509338,
        1.5796780586242676,
        -0.3439054787158966,
        -0.30973443388938904,
        -0.5074584484100342,
        -0.16605016589164734,
        -1.467064380645752,
        0.6842728853225708,
        -0.6039513945579529,
        -0.1645098179578781,
        -0.05167525261640549,
        -0.422109991312027,
        -1.3726649284362793,
        0.18185381591320038,
        0.8903183341026306,
        -2.4086310863494873,
        -0.698383629322052,
        -1.4352781772613525,
        0.22951294481754303,
        0.4591269791126251,
        -0.11673887819051743,
        0.4963780641555786,
        -0.19993308186531067,
        1.085608959197998,
        -0.8469874858856201,
    };

    const ref: [32]f32 align(16) = .{
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    };

    var out: [32]f32 align(16) = .{0} ** 32;
    var scr: [128]f32 align(16) = .{0} ** 128;
    Conv_Im2Col_NHWC(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}

test "NHWC Im2Col test 5" {
    const cfg = ConvConfig(f32, 16, ConvLayout.NHWC, ConvBackend.Direct){
        .inp0_shape = .{ 2, 3, 5, 4 },
        .inp1_shape = .{ 2, 2, 2, 4 },
        .out0_shape = .{ 2, 1, 3, 2 },
        .kernel_shape = .{ 2, 2 },
        .strides = .{ 6, 2 },
        .dilations = .{ 1, 2 },
        .pads = .{ 1, 1, 1, 1 },
    };

    const inp: [120]f32 align(16) = .{
        2.271074056625366,
        -0.570284366607666,
        -0.6401262879371643,
        -0.39508745074272156,
        0.9369328618049622,
        0.5571548938751221,
        0.36148926615715027,
        -1.29184889793396,
        -0.47223711013793945,
        -0.7258759140968323,
        1.657626748085022,
        0.5466341972351074,
        0.7305492162704468,
        -1.0418874025344849,
        0.592029333114624,
        0.13770291209220886,
        -1.0368374586105347,
        0.13812856376171112,
        -0.621353268623352,
        1.325432538986206,
        -1.9336941242218018,
        0.6912831664085388,
        -0.40109410881996155,
        -1.4821175336837769,
        -1.6136225461959839,
        -0.8594626188278198,
        -0.5792995691299438,
        0.29822805523872375,
        0.16779589653015137,
        -0.101217120885849,
        -0.8341068029403687,
        -0.22343894839286804,
        -0.1693212389945984,
        0.20937098562717438,
        1.2364619970321655,
        0.6885364651679993,
        -0.06774784624576569,
        -0.6451492309570312,
        0.2881562411785126,
        -0.03343676030635834,
        -0.09582749009132385,
        -0.7681752443313599,
        1.6532647609710693,
        -0.3736285865306854,
        -0.5737837553024292,
        -2.5987391471862793,
        -0.21875019371509552,
        -1.1274261474609375,
        0.6708343625068665,
        -1.7443267107009888,
        -0.646418035030365,
        1.5440856218338013,
        0.6693699955940247,
        -1.7346900701522827,
        -0.9520465135574341,
        1.0500359535217285,
        -0.5752037763595581,
        0.272392213344574,
        -0.8469921946525574,
        -0.38636597990989685,
        0.917787492275238,
        0.9910016655921936,
        -0.7017291784286499,
        -0.40290436148643494,
        -0.903738796710968,
        -0.30141180753707886,
        0.9065820574760437,
        -1.0917091369628906,
        -1.6764954328536987,
        0.38268914818763733,
        -1.153145432472229,
        -0.5911785960197449,
        -0.05911409854888916,
        -0.3783884048461914,
        -1.3692221641540527,
        0.8115959167480469,
        0.6073804497718811,
        -0.7498829960823059,
        -1.2330025434494019,
        -0.7076318264007568,
        0.08086676895618439,
        1.2670096158981323,
        -0.03279201313853264,
        -1.6549395322799683,
        -0.4369138479232788,
        0.30242764949798584,
        -0.5099495053291321,
        1.55319344997406,
        0.5479720830917358,
        0.5033319592475891,
        -0.08063430339097977,
        0.5041663646697998,
        -0.3849326968193054,
        1.6500623226165771,
        0.6093232035636902,
        -1.2706828117370605,
        0.4971649646759033,
        -0.1207427904009819,
        0.8180230855941772,
        1.0607131719589233,
        -1.3764175176620483,
        -0.569403886795044,
        1.5216089487075806,
        -0.2654974162578583,
        0.12882567942142487,
        1.4037437438964844,
        1.7042640447616577,
        0.03233257681131363,
        1.713271975517273,
        0.18924663960933685,
        1.2700217962265015,
        -2.1070151329040527,
        -1.8173422813415527,
        -1.7478057146072388,
        2.3403306007385254,
        -0.22000402212142944,
        -0.366384357213974,
        0.4486522376537323,
        1.178162932395935,
        -0.31400540471076965,
    };

    const wgt: [32]f32 align(16) = .{
        -0.8227038979530334,
        0.3142881989479065,
        0.405343234539032,
        -0.9768831729888916,
        -1.316884160041809,
        -0.3543798327445984,
        -0.21192850172519684,
        0.4714210629463196,
        0.37902840971946716,
        0.46299606561660767,
        0.40846434235572815,
        1.1986758708953857,
        -0.9788447618484497,
        -0.3375508785247803,
        -0.7470404505729675,
        0.32030218839645386,
        0.9992929100990295,
        0.7397836446762085,
        -1.2426459789276123,
        -0.2463906854391098,
        -0.5830079913139343,
        0.7663647532463074,
        0.044975683093070984,
        0.785105288028717,
        -0.9188494086265564,
        -0.06484254449605942,
        0.6242309212684631,
        -0.6628071069717407,
        0.34693172574043274,
        -0.2485814243555069,
        -0.3931411802768707,
        -2.0383646488189697,
    };

    const ref: [12]f32 align(16) = .{
        -1.7890089750289917,
        2.6776962280273438,
        -1.5493353605270386,
        0.18387655913829803,
        0.20139318704605103,
        -0.3254135251045227,
        -0.040568478405475616,
        1.6302763223648071,
        0.04801506549119949,
        1.096974492073059,
        0.21596373617649078,
        -1.31378972530365,
    };

    var out: [12]f32 align(16) = .{0} ** 12;
    var scr: [48]f32 align(16) = .{0} ** 48;
    Conv_Im2Col_NHWC(cfg, &inp, &wgt, &out, &scr);

    for (out, 0..) |v, i| {
        try testing.expect(std.math.approxEqAbs(f32, v, ref[i], 1e-4));
    }
}
